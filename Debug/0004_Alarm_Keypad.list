
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005890  08005890  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005898  08005898  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080058a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000064  08005904  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08005904  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011138  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025e9  00000000  00000000  0003120f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  000337f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbc  00000000  00000000  00034818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f56  00000000  00000000  000354d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151f2  00000000  00000000  0005842a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b10  00000000  00000000  0006d61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000495c  00000000  00000000  0014112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00145a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ac0 	.word	0x08004ac0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08004ac0 	.word	0x08004ac0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	int done=1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	while(done)
 80005c6:	e19b      	b.n	8000900 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	48b3      	ldr	r0, [pc, #716]	; (800089c <Get_Key+0x2e0>)
 80005d0:	f001 fb0a 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	48b0      	ldr	r0, [pc, #704]	; (800089c <Get_Key+0x2e0>)
 80005da:	f001 fb05 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	48ae      	ldr	r0, [pc, #696]	; (800089c <Get_Key+0x2e0>)
 80005e4:	f001 fb00 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	48ab      	ldr	r0, [pc, #684]	; (800089c <Get_Key+0x2e0>)
 80005ee:	f001 fafb 	bl	8001be8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	48a9      	ldr	r0, [pc, #676]	; (800089c <Get_Key+0x2e0>)
 80005f6:	f001 fadf 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00b      	beq.n	8000618 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000600:	bf00      	nop
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	48a5      	ldr	r0, [pc, #660]	; (800089c <Get_Key+0x2e0>)
 8000606:	f001 fad7 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f8      	bne.n	8000602 <Get_Key+0x46>
		key='1';
 8000610:	4ba3      	ldr	r3, [pc, #652]	; (80008a0 <Get_Key+0x2e4>)
 8000612:	2231      	movs	r2, #49	; 0x31
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e177      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	48a2      	ldr	r0, [pc, #648]	; (80008a4 <Get_Key+0x2e8>)
 800061c:	f001 facc 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00b      	beq.n	800063e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000626:	bf00      	nop
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	489e      	ldr	r0, [pc, #632]	; (80008a4 <Get_Key+0x2e8>)
 800062c:	f001 fac4 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f8      	bne.n	8000628 <Get_Key+0x6c>
		key='4';
 8000636:	4b9a      	ldr	r3, [pc, #616]	; (80008a0 <Get_Key+0x2e4>)
 8000638:	2234      	movs	r2, #52	; 0x34
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e164      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4899      	ldr	r0, [pc, #612]	; (80008a8 <Get_Key+0x2ec>)
 8000644:	f001 fab8 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800064e:	bf00      	nop
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4894      	ldr	r0, [pc, #592]	; (80008a8 <Get_Key+0x2ec>)
 8000656:	f001 faaf 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f7      	bne.n	8000650 <Get_Key+0x94>
		key='7';
 8000660:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <Get_Key+0x2e4>)
 8000662:	2237      	movs	r2, #55	; 0x37
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e14f      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	488e      	ldr	r0, [pc, #568]	; (80008a8 <Get_Key+0x2ec>)
 800066e:	f001 faa3 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00c      	beq.n	8000692 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000678:	bf00      	nop
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <Get_Key+0x2ec>)
 8000680:	f001 fa9a 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <Get_Key+0xbe>
		key='*';
 800068a:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <Get_Key+0x2e4>)
 800068c:	222a      	movs	r2, #42	; 0x2a
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e13a      	b.n	8000908 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4880      	ldr	r0, [pc, #512]	; (800089c <Get_Key+0x2e0>)
 800069a:	f001 faa5 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	487e      	ldr	r0, [pc, #504]	; (800089c <Get_Key+0x2e0>)
 80006a4:	f001 faa0 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	487b      	ldr	r0, [pc, #492]	; (800089c <Get_Key+0x2e0>)
 80006ae:	f001 fa9b 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4879      	ldr	r0, [pc, #484]	; (800089c <Get_Key+0x2e0>)
 80006b8:	f001 fa96 	bl	8001be8 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4877      	ldr	r0, [pc, #476]	; (800089c <Get_Key+0x2e0>)
 80006c0:	f001 fa7a 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00b      	beq.n	80006e2 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ca:	bf00      	nop
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <Get_Key+0x2e0>)
 80006d0:	f001 fa72 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f8      	bne.n	80006cc <Get_Key+0x110>
		key='2';
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <Get_Key+0x2e4>)
 80006dc:	2232      	movs	r2, #50	; 0x32
 80006de:	701a      	strb	r2, [r3, #0]
		break;
 80006e0:	e112      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	486f      	ldr	r0, [pc, #444]	; (80008a4 <Get_Key+0x2e8>)
 80006e6:	f001 fa67 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00b      	beq.n	8000708 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006f0:	bf00      	nop
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	486b      	ldr	r0, [pc, #428]	; (80008a4 <Get_Key+0x2e8>)
 80006f6:	f001 fa5f 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f8      	bne.n	80006f2 <Get_Key+0x136>
		key='5';
 8000700:	4b67      	ldr	r3, [pc, #412]	; (80008a0 <Get_Key+0x2e4>)
 8000702:	2235      	movs	r2, #53	; 0x35
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e0ff      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	4866      	ldr	r0, [pc, #408]	; (80008a8 <Get_Key+0x2ec>)
 800070e:	f001 fa53 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00c      	beq.n	8000732 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000718:	bf00      	nop
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4862      	ldr	r0, [pc, #392]	; (80008a8 <Get_Key+0x2ec>)
 8000720:	f001 fa4a 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f7      	bne.n	800071a <Get_Key+0x15e>
		key='8';
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <Get_Key+0x2e4>)
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	701a      	strb	r2, [r3, #0]
		break;
 8000730:	e0ea      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	485c      	ldr	r0, [pc, #368]	; (80008a8 <Get_Key+0x2ec>)
 8000738:	f001 fa3e 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000742:	bf00      	nop
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4857      	ldr	r0, [pc, #348]	; (80008a8 <Get_Key+0x2ec>)
 800074a:	f001 fa35 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f7      	bne.n	8000744 <Get_Key+0x188>
		key='0';
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <Get_Key+0x2e4>)
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	701a      	strb	r2, [r3, #0]
		break;
 800075a:	e0d5      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	484e      	ldr	r0, [pc, #312]	; (800089c <Get_Key+0x2e0>)
 8000764:	f001 fa40 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	484b      	ldr	r0, [pc, #300]	; (800089c <Get_Key+0x2e0>)
 800076e:	f001 fa3b 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4849      	ldr	r0, [pc, #292]	; (800089c <Get_Key+0x2e0>)
 8000778:	f001 fa36 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <Get_Key+0x2e0>)
 8000782:	f001 fa31 	bl	8001be8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4844      	ldr	r0, [pc, #272]	; (800089c <Get_Key+0x2e0>)
 800078a:	f001 fa15 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00b      	beq.n	80007ac <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000794:	bf00      	nop
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4840      	ldr	r0, [pc, #256]	; (800089c <Get_Key+0x2e0>)
 800079a:	f001 fa0d 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f8      	bne.n	8000796 <Get_Key+0x1da>
		key='3';
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <Get_Key+0x2e4>)
 80007a6:	2233      	movs	r2, #51	; 0x33
 80007a8:	701a      	strb	r2, [r3, #0]
		break;
 80007aa:	e0ad      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <Get_Key+0x2e8>)
 80007b0:	f001 fa02 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ba:	bf00      	nop
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <Get_Key+0x2e8>)
 80007c0:	f001 f9fa 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <Get_Key+0x200>
		key='6';
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <Get_Key+0x2e4>)
 80007cc:	2236      	movs	r2, #54	; 0x36
 80007ce:	701a      	strb	r2, [r3, #0]
		break;
 80007d0:	e09a      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4834      	ldr	r0, [pc, #208]	; (80008a8 <Get_Key+0x2ec>)
 80007d8:	f001 f9ee 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007e2:	bf00      	nop
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <Get_Key+0x2ec>)
 80007ea:	f001 f9e5 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f7      	bne.n	80007e4 <Get_Key+0x228>
		key='9';
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <Get_Key+0x2e4>)
 80007f6:	2239      	movs	r2, #57	; 0x39
 80007f8:	701a      	strb	r2, [r3, #0]
		break;
 80007fa:	e085      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <Get_Key+0x2ec>)
 8000802:	f001 f9d9 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	4825      	ldr	r0, [pc, #148]	; (80008a8 <Get_Key+0x2ec>)
 8000814:	f001 f9d0 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x252>
		key='#';
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <Get_Key+0x2e4>)
 8000820:	2223      	movs	r2, #35	; 0x23
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e070      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <Get_Key+0x2e0>)
 800082e:	f001 f9db 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <Get_Key+0x2e0>)
 8000838:	f001 f9d6 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Get_Key+0x2e0>)
 8000842:	f001 f9d1 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <Get_Key+0x2e0>)
 800084c:	f001 f9cc 	bl	8001be8 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <Get_Key+0x2e0>)
 8000854:	f001 f9b0 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800085e:	bf00      	nop
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <Get_Key+0x2e0>)
 8000864:	f001 f9a8 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f8      	bne.n	8000860 <Get_Key+0x2a4>
		key='A';
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <Get_Key+0x2e4>)
 8000870:	2241      	movs	r2, #65	; 0x41
 8000872:	701a      	strb	r2, [r3, #0]
		break;
 8000874:	e048      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <Get_Key+0x2e8>)
 800087a:	f001 f99d 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000884:	bf00      	nop
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <Get_Key+0x2e8>)
 800088a:	f001 f995 	bl	8001bb8 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f8      	bne.n	8000886 <Get_Key+0x2ca>
		key='B';
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <Get_Key+0x2e4>)
 8000896:	2242      	movs	r2, #66	; 0x42
 8000898:	701a      	strb	r2, [r3, #0]
		break;
 800089a:	e035      	b.n	8000908 <Get_Key+0x34c>
 800089c:	40020400 	.word	0x40020400
 80008a0:	20000080 	.word	0x20000080
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <Get_Key+0x360>)
 80008b2:	f001 f981 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008bc:	bf00      	nop
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <Get_Key+0x360>)
 80008c4:	f001 f978 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f7      	bne.n	80008be <Get_Key+0x302>
		key='C';
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <Get_Key+0x364>)
 80008d0:	2243      	movs	r2, #67	; 0x43
 80008d2:	701a      	strb	r2, [r3, #0]
		break;
 80008d4:	e018      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <Get_Key+0x360>)
 80008dc:	f001 f96c 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00c      	beq.n	8000900 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <Get_Key+0x360>)
 80008ee:	f001 f963 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f7      	bne.n	80008e8 <Get_Key+0x32c>
		key='D';
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Get_Key+0x364>)
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	701a      	strb	r2, [r3, #0]
		break;
 80008fe:	e003      	b.n	8000908 <Get_Key+0x34c>
	while(done)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f ae60 	bne.w	80005c8 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	2120      	movs	r1, #32
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <Get_Key+0x360>)
 800090c:	f001 f985 	bl	8001c1a <HAL_GPIO_TogglePin>
	return(key);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Get_Key+0x364>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020000 	.word	0x40020000
 8000920:	20000080 	.word	0x20000080

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fe6a 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f852 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 f916 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000934:	f000 f8ea 	bl	8000b0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000938:	f000 f8ba 	bl	8000ab0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 800093c:	f000 f9c4 	bl	8000cc8 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fb2a 	bl	8000f9c <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	491c      	ldr	r1, [pc, #112]	; (80009bc <main+0x98>)
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <main+0x9c>)
 800094e:	f000 fbbb 	bl	80010c8 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000952:	211e      	movs	r1, #30
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb21 	bl	8000f9c <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 800095a:	f000 fa79 	bl	8000e50 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 800095e:	f000 fa77 	bl	8000e50 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 8000962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000966:	f000 fe8d 	bl	8001684 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
	  key = Get_Key();
 800096a:	f7ff fe27 	bl	80005bc <Get_Key>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <main+0xa0>)
 8000974:	701a      	strb	r2, [r3, #0]
	  sprintf(hold, "%c", key);
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <main+0xa0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	4912      	ldr	r1, [pc, #72]	; (80009c8 <main+0xa4>)
 800097e:	4813      	ldr	r0, [pc, #76]	; (80009cc <main+0xa8>)
 8000980:	f003 fbfa 	bl	8004178 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100);
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <main+0xa8>)
 8000986:	f7ff fc43 	bl	8000210 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	2364      	movs	r3, #100	; 0x64
 8000990:	490e      	ldr	r1, [pc, #56]	; (80009cc <main+0xa8>)
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <main+0xac>)
 8000994:	f003 f834 	bl	8003a00 <HAL_UART_Transmit>
	  SSD1306_GotoXY (0, 30);
 8000998:	211e      	movs	r1, #30
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fafe 	bl	8000f9c <SSD1306_GotoXY>
	  SSD1306_UpdateScreen();
 80009a0:	f000 fa56 	bl	8000e50 <SSD1306_UpdateScreen>
	  SSD1306_Puts (hold, &Font_11x18, 1);
 80009a4:	2201      	movs	r2, #1
 80009a6:	4905      	ldr	r1, [pc, #20]	; (80009bc <main+0x98>)
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <main+0xa8>)
 80009aa:	f000 fb8d 	bl	80010c8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80009ae:	f000 fa4f 	bl	8000e50 <SSD1306_UpdateScreen>
	  HAL_Delay (500);
 80009b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b6:	f000 fe65 	bl	8001684 <HAL_Delay>
	  key = Get_Key();
 80009ba:	e7d6      	b.n	800096a <main+0x46>
 80009bc:	20000000 	.word	0x20000000
 80009c0:	08004ad8 	.word	0x08004ad8
 80009c4:	20000080 	.word	0x20000080
 80009c8:	08004ae4 	.word	0x08004ae4
 80009cc:	20000120 	.word	0x20000120
 80009d0:	200000d8 	.word	0x200000d8

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2234      	movs	r2, #52	; 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fbe8 	bl	80041b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <SystemClock_Config+0xd4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <SystemClock_Config+0xd8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a20:	4a22      	ldr	r2, [pc, #136]	; (8000aac <SystemClock_Config+0xd8>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fa3c 	bl	8002ee0 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a6e:	f000 f925 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 feaa 	bl	80027e8 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a9a:	f000 f90f 	bl	8000cbc <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3750      	adds	r7, #80	; 0x50
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_I2C1_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x58>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000aee:	f001 f8af 	bl	8001c50 <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 f8e0 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000084 	.word	0x20000084
 8000b04:	40005400 	.word	0x40005400
 8000b08:	00061a80 	.word	0x00061a80

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART2_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f002 ff0c 	bl	8003960 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f8b5 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000d8 	.word	0x200000d8
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a3b      	ldr	r2, [pc, #236]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a2d      	ldr	r2, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4828      	ldr	r0, [pc, #160]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000bec:	f000 fffc 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000bf8:	f000 fff6 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000c14:	f000 fe3c 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c18:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000c32:	f000 fe2d 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000c4a:	f000 fe21 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000c64:	f000 fe14 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000c7c:	f000 fe08 	bl	8001890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 fccb 	bl	8001644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40001000 	.word	0x40001000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000cce:	f000 fa21 	bl	8001114 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000cd2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2178      	movs	r1, #120	; 0x78
 8000cda:	485b      	ldr	r0, [pc, #364]	; (8000e48 <SSD1306_Init+0x180>)
 8000cdc:	f001 f9fa 	bl	80020d4 <HAL_I2C_IsDeviceReady>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e0a9      	b.n	8000e3e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000cea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000cee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cf0:	e002      	b.n	8000cf8 <SSD1306_Init+0x30>
		p--;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f9      	bne.n	8000cf2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cfe:	22ae      	movs	r2, #174	; 0xae
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	; 0x78
 8000d04:	f000 fa82 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f000 fa7d 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d12:	2210      	movs	r2, #16
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 fa78 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d1c:	22b0      	movs	r2, #176	; 0xb0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	; 0x78
 8000d22:	f000 fa73 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d26:	22c8      	movs	r2, #200	; 0xc8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 fa6e 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	; 0x78
 8000d36:	f000 fa69 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	; 0x78
 8000d40:	f000 fa64 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	; 0x78
 8000d4a:	f000 fa5f 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d4e:	2281      	movs	r2, #129	; 0x81
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f000 fa5a 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	; 0x78
 8000d5e:	f000 fa55 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d62:	22a1      	movs	r2, #161	; 0xa1
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	; 0x78
 8000d68:	f000 fa50 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d6c:	22a6      	movs	r2, #166	; 0xa6
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	; 0x78
 8000d72:	f000 fa4b 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d76:	22a8      	movs	r2, #168	; 0xa8
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	; 0x78
 8000d7c:	f000 fa46 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d80:	223f      	movs	r2, #63	; 0x3f
 8000d82:	2100      	movs	r1, #0
 8000d84:	2078      	movs	r0, #120	; 0x78
 8000d86:	f000 fa41 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d8a:	22a4      	movs	r2, #164	; 0xa4
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2078      	movs	r0, #120	; 0x78
 8000d90:	f000 fa3c 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d94:	22d3      	movs	r2, #211	; 0xd3
 8000d96:	2100      	movs	r1, #0
 8000d98:	2078      	movs	r0, #120	; 0x78
 8000d9a:	f000 fa37 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2078      	movs	r0, #120	; 0x78
 8000da4:	f000 fa32 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000da8:	22d5      	movs	r2, #213	; 0xd5
 8000daa:	2100      	movs	r1, #0
 8000dac:	2078      	movs	r0, #120	; 0x78
 8000dae:	f000 fa2d 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000db2:	22f0      	movs	r2, #240	; 0xf0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2078      	movs	r0, #120	; 0x78
 8000db8:	f000 fa28 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000dbc:	22d9      	movs	r2, #217	; 0xd9
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2078      	movs	r0, #120	; 0x78
 8000dc2:	f000 fa23 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000dc6:	2222      	movs	r2, #34	; 0x22
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2078      	movs	r0, #120	; 0x78
 8000dcc:	f000 fa1e 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000dd0:	22da      	movs	r2, #218	; 0xda
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2078      	movs	r0, #120	; 0x78
 8000dd6:	f000 fa19 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000dda:	2212      	movs	r2, #18
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2078      	movs	r0, #120	; 0x78
 8000de0:	f000 fa14 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000de4:	22db      	movs	r2, #219	; 0xdb
 8000de6:	2100      	movs	r1, #0
 8000de8:	2078      	movs	r0, #120	; 0x78
 8000dea:	f000 fa0f 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000dee:	2220      	movs	r2, #32
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	; 0x78
 8000df4:	f000 fa0a 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000df8:	228d      	movs	r2, #141	; 0x8d
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2078      	movs	r0, #120	; 0x78
 8000dfe:	f000 fa05 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e02:	2214      	movs	r2, #20
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	; 0x78
 8000e08:	f000 fa00 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e0c:	22af      	movs	r2, #175	; 0xaf
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2078      	movs	r0, #120	; 0x78
 8000e12:	f000 f9fb 	bl	800120c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e16:	222e      	movs	r2, #46	; 0x2e
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	; 0x78
 8000e1c:	f000 f9f6 	bl	800120c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 f843 	bl	8000eac <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000e26:	f000 f813 	bl	8000e50 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SSD1306_Init+0x184>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SSD1306_Init+0x184>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SSD1306_Init+0x184>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000084 	.word	0x20000084
 8000e4c:	20000524 	.word	0x20000524

08000e50 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	e01d      	b.n	8000e98 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	3b50      	subs	r3, #80	; 0x50
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	2078      	movs	r0, #120	; 0x78
 8000e68:	f000 f9d0 	bl	800120c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2078      	movs	r0, #120	; 0x78
 8000e72:	f000 f9cb 	bl	800120c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e76:	2210      	movs	r2, #16
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2078      	movs	r0, #120	; 0x78
 8000e7c:	f000 f9c6 	bl	800120c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <SSD1306_UpdateScreen+0x58>)
 8000e86:	441a      	add	r2, r3
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	2078      	movs	r0, #120	; 0x78
 8000e8e:	f000 f957 	bl	8001140 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	3301      	adds	r3, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b07      	cmp	r3, #7
 8000e9c:	d9de      	bls.n	8000e5c <SSD1306_UpdateScreen+0xc>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000124 	.word	0x20000124

08000eac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <SSD1306_Fill+0x14>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e000      	b.n	8000ec2 <SSD1306_Fill+0x16>
 8000ec0:	23ff      	movs	r3, #255	; 0xff
 8000ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <SSD1306_Fill+0x2c>)
 8000eca:	f003 f975 	bl	80041b8 <memset>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000124 	.word	0x20000124

08000edc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	80bb      	strh	r3, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	70fb      	strb	r3, [r7, #3]
	if (
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef2:	d848      	bhi.n	8000f86 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef8:	d845      	bhi.n	8000f86 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <SSD1306_DrawPixel+0xb8>)
 8000efc:	791b      	ldrb	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d11a      	bne.n	8000f4c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	08db      	lsrs	r3, r3, #3
 8000f1c:	b298      	uxth	r0, r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	01db      	lsls	r3, r3, #7
 8000f22:	4413      	add	r3, r2
 8000f24:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	b25a      	sxtb	r2, r3
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b259      	sxtb	r1, r3
 8000f3c:	88fa      	ldrh	r2, [r7, #6]
 8000f3e:	4603      	mov	r3, r0
 8000f40:	01db      	lsls	r3, r3, #7
 8000f42:	4413      	add	r3, r2
 8000f44:	b2c9      	uxtb	r1, r1
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f48:	54d1      	strb	r1, [r2, r3]
 8000f4a:	e01d      	b.n	8000f88 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f4c:	88fa      	ldrh	r2, [r7, #6]
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	b298      	uxth	r0, r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	01db      	lsls	r3, r3, #7
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	4013      	ands	r3, r2
 8000f74:	b259      	sxtb	r1, r3
 8000f76:	88fa      	ldrh	r2, [r7, #6]
 8000f78:	4603      	mov	r3, r0
 8000f7a:	01db      	lsls	r3, r3, #7
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2c9      	uxtb	r1, r1
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f82:	54d1      	strb	r1, [r2, r3]
 8000f84:	e000      	b.n	8000f88 <SSD1306_DrawPixel+0xac>
		return;
 8000f86:	bf00      	nop
	}
}
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000524 	.word	0x20000524
 8000f98:	20000124 	.word	0x20000124

08000f9c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	80fb      	strh	r3, [r7, #6]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SSD1306_GotoXY+0x28>)
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <SSD1306_GotoXY+0x28>)
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	8053      	strh	r3, [r2, #2]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	20000524 	.word	0x20000524

08000fc8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <SSD1306_Putc+0xfc>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
	if (
 8000fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe6:	dc07      	bgt.n	8000ff8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <SSD1306_Putc+0xfc>)
 8000fea:	885b      	ldrh	r3, [r3, #2]
 8000fec:	461a      	mov	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ff4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff6:	dd01      	ble.n	8000ffc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e05e      	b.n	80010ba <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e04b      	b.n	800109a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	3b20      	subs	r3, #32
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	7849      	ldrb	r1, [r1, #1]
 800100e:	fb01 f303 	mul.w	r3, r1, r3
 8001012:	4619      	mov	r1, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	440b      	add	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	e030      	b.n	8001088 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d010      	beq.n	8001058 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <SSD1306_Putc+0xfc>)
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	b29b      	uxth	r3, r3
 800103e:	4413      	add	r3, r2
 8001040:	b298      	uxth	r0, r3
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <SSD1306_Putc+0xfc>)
 8001044:	885a      	ldrh	r2, [r3, #2]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	79ba      	ldrb	r2, [r7, #6]
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff ff43 	bl	8000edc <SSD1306_DrawPixel>
 8001056:	e014      	b.n	8001082 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <SSD1306_Putc+0xfc>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	b29b      	uxth	r3, r3
 8001060:	4413      	add	r3, r2
 8001062:	b298      	uxth	r0, r3
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <SSD1306_Putc+0xfc>)
 8001066:	885a      	ldrh	r2, [r3, #2]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b299      	uxth	r1, r3
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	f7ff ff2d 	bl	8000edc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	3301      	adds	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4293      	cmp	r3, r2
 8001092:	d3c8      	bcc.n	8001026 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d3ad      	bcc.n	8001002 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <SSD1306_Putc+0xfc>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <SSD1306_Putc+0xfc>)
 80010b6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000524 	.word	0x20000524

080010c8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	4613      	mov	r3, r2
 80010d4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80010d6:	e012      	b.n	80010fe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff71 	bl	8000fc8 <SSD1306_Putc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d002      	beq.n	80010f8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	e008      	b.n	800110a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1e8      	bne.n	80010d8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <ssd1306_I2C_Init+0x28>)
 800111c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800111e:	e002      	b.n	8001126 <ssd1306_I2C_Init+0x12>
		p--;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f9      	bne.n	8001120 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	0003d090 	.word	0x0003d090

08001140 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b0c7      	sub	sp, #284	; 0x11c
 8001144:	af02      	add	r7, sp, #8
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800114e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001152:	600a      	str	r2, [r1, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800115a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800115e:	4622      	mov	r2, r4
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001166:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800116a:	4602      	mov	r2, r0
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001172:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001176:	460a      	mov	r2, r1
 8001178:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800117a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800117e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001182:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001186:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001194:	e015      	b.n	80011c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001196:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800119a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800119e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	441a      	add	r2, r3
 80011a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011aa:	3301      	adds	r3, #1
 80011ac:	7811      	ldrb	r1, [r2, #0]
 80011ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011b2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80011b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011bc:	3301      	adds	r3, #1
 80011be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8df      	bhi.n	8001196 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b299      	uxth	r1, r3
 80011e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f107 020c 	add.w	r2, r7, #12
 80011f4:	200a      	movs	r0, #10
 80011f6:	9000      	str	r0, [sp, #0]
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <ssd1306_I2C_WriteMulti+0xc8>)
 80011fa:	f000 fe6d 	bl	8001ed8 <HAL_I2C_Master_Transmit>
}
 80011fe:	bf00      	nop
 8001200:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	20000084 	.word	0x20000084

0800120c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	460b      	mov	r3, r1
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	4613      	mov	r3, r2
 800121c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	b299      	uxth	r1, r3
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	230a      	movs	r3, #10
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2302      	movs	r3, #2
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <ssd1306_I2C_Write+0x38>)
 8001236:	f000 fe4f 	bl	8001ed8 <HAL_I2C_Master_Transmit>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000084 	.word	0x20000084

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_MspInit+0x4c>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_MspInit+0x4c>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001286:	2007      	movs	r0, #7
 8001288:	f000 facd 	bl	8001826 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_I2C_MspInit+0x84>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12c      	bne.n	8001314 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80012d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e8:	2304      	movs	r3, #4
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <HAL_I2C_MspInit+0x8c>)
 80012f4:	f000 facc 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_I2C_MspInit+0x88>)
 8001302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_I2C_MspInit+0x88>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_UART_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12b      	bne.n	80013a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_UART_MspInit+0x8c>)
 800139e:	f000 fa77 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_InitTick+0xe4>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <HAL_InitTick+0xe4>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_InitTick+0xe4>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e4:	f107 0210 	add.w	r2, r7, #16
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 fb14 	bl	8002a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fe:	f001 fae5 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8001402:	6378      	str	r0, [r7, #52]	; 0x34
 8001404:	e004      	b.n	8001410 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001406:	f001 fae1 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 800140a:	4603      	mov	r3, r0
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_InitTick+0xe8>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	3b01      	subs	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_InitTick+0xec>)
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_InitTick+0xf0>)
 8001422:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_InitTick+0xec>)
 8001426:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_InitTick+0xec>)
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_InitTick+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_InitTick+0xec>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_InitTick+0xec>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <HAL_InitTick+0xec>)
 8001446:	f001 ffe9 	bl	800341c <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11b      	bne.n	8001490 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <HAL_InitTick+0xec>)
 800145a:	f002 f839 	bl	80034d0 <HAL_TIM_Base_Start_IT>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800146c:	2036      	movs	r0, #54	; 0x36
 800146e:	f000 fa01 	bl	8001874 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d808      	bhi.n	800148a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	2036      	movs	r0, #54	; 0x36
 800147e:	f000 f9dd 	bl	800183c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_InitTick+0xf4>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e002      	b.n	8001490 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001494:	4618      	mov	r0, r3
 8001496:	3738      	adds	r7, #56	; 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	2000052c 	.word	0x2000052c
 80014a8:	40001000 	.word	0x40001000
 80014ac:	2000000c 	.word	0x2000000c

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM6_DAC_IRQHandler+0x10>)
 800150e:	f002 f84f 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000052c 	.word	0x2000052c

0800151c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <_sbrk+0x5c>)
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <_sbrk+0x60>)
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <_sbrk+0x64>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <_sbrk+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	429a      	cmp	r2, r3
 800154a:	d207      	bcs.n	800155c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800154c:	f002 fe3c 	bl	80041c8 <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	220c      	movs	r2, #12
 8001554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	e009      	b.n	8001570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <_sbrk+0x64>)
 800156c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156e:	68fb      	ldr	r3, [r7, #12]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20020000 	.word	0x20020000
 800157c:	00000400 	.word	0x00000400
 8001580:	20000574 	.word	0x20000574
 8001584:	200006c8 	.word	0x200006c8

08001588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SystemInit+0x20>)
 800158e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <SystemInit+0x20>)
 8001594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015b0:	f7ff ffea 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015da:	f002 fdfb 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff f9a1 	bl	8000924 <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80015f0:	080058a0 	.word	0x080058a0
  ldr r2, =_sbss
 80015f4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80015f8:	200006c4 	.word	0x200006c4

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_Init+0x40>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_Init+0x40>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x40>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f8fc 	bl	8001826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff fec2 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fe08 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000010 	.word	0x20000010
 8001668:	20000578 	.word	0x20000578

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000578 	.word	0x20000578

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff ffee 	bl	800166c <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffde 	bl	800166c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000010 	.word	0x20000010

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	; (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff4c 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184e:	f7ff ff61 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	f7ff ffb1 	bl	80017c0 <NVIC_EncodePriority>
 800185e:	4602      	mov	r2, r0
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff80 	bl	800176c <__NVIC_SetPriority>
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff54 	bl	8001730 <__NVIC_EnableIRQ>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e165      	b.n	8001b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8154 	bne.w	8001b72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d130      	bne.n	8001944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b03      	cmp	r3, #3
 800194e:	d017      	beq.n	8001980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80ae 	beq.w	8001b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a5c      	ldr	r2, [pc, #368]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4f      	ldr	r2, [pc, #316]	; (8001b98 <HAL_GPIO_Init+0x308>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d025      	beq.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01f      	beq.n	8001aa6 <HAL_GPIO_Init+0x216>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_GPIO_Init+0x310>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_GPIO_Init+0x314>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_GPIO_Init+0x318>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x20a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x31c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x206>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x202>
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f ae96 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40021400 	.word	0x40021400
 8001bb0:	40021800 	.word	0x40021800
 8001bb4:	40013c00 	.word	0x40013c00

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c2c:	887a      	ldrh	r2, [r7, #2]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e12b      	b.n	8001eba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fb0e 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb4:	f000 fe8a 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8001cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4a81      	ldr	r2, [pc, #516]	; (8001ec4 <HAL_I2C_Init+0x274>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d807      	bhi.n	8001cd4 <HAL_I2C_Init+0x84>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4a80      	ldr	r2, [pc, #512]	; (8001ec8 <HAL_I2C_Init+0x278>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	bf94      	ite	ls
 8001ccc:	2301      	movls	r3, #1
 8001cce:	2300      	movhi	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	e006      	b.n	8001ce2 <HAL_I2C_Init+0x92>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4a7d      	ldr	r2, [pc, #500]	; (8001ecc <HAL_I2C_Init+0x27c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	bf94      	ite	ls
 8001cdc:	2301      	movls	r3, #1
 8001cde:	2300      	movhi	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0e7      	b.n	8001eba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4a78      	ldr	r2, [pc, #480]	; (8001ed0 <HAL_I2C_Init+0x280>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	0c9b      	lsrs	r3, r3, #18
 8001cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a6a      	ldr	r2, [pc, #424]	; (8001ec4 <HAL_I2C_Init+0x274>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d802      	bhi.n	8001d24 <HAL_I2C_Init+0xd4>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3301      	adds	r3, #1
 8001d22:	e009      	b.n	8001d38 <HAL_I2C_Init+0xe8>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	4a69      	ldr	r2, [pc, #420]	; (8001ed4 <HAL_I2C_Init+0x284>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	3301      	adds	r3, #1
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	495c      	ldr	r1, [pc, #368]	; (8001ec4 <HAL_I2C_Init+0x274>)
 8001d54:	428b      	cmp	r3, r1
 8001d56:	d819      	bhi.n	8001d8c <HAL_I2C_Init+0x13c>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1e59      	subs	r1, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_I2C_Init+0x138>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e59      	subs	r1, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d80:	3301      	adds	r3, #1
 8001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d86:	e051      	b.n	8001e2c <HAL_I2C_Init+0x1dc>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e04f      	b.n	8001e2c <HAL_I2C_Init+0x1dc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <HAL_I2C_Init+0x168>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1e58      	subs	r0, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	440b      	add	r3, r1
 8001da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e012      	b.n	8001dde <HAL_I2C_Init+0x18e>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x196>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e022      	b.n	8001e2c <HAL_I2C_Init+0x1dc>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10e      	bne.n	8001e0c <HAL_I2C_Init+0x1bc>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1e58      	subs	r0, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	440b      	add	r3, r1
 8001dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	e00f      	b.n	8001e2c <HAL_I2C_Init+0x1dc>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	6809      	ldr	r1, [r1, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6911      	ldr	r1, [r2, #16]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	000186a0 	.word	0x000186a0
 8001ec8:	001e847f 	.word	0x001e847f
 8001ecc:	003d08ff 	.word	0x003d08ff
 8001ed0:	431bde83 	.word	0x431bde83
 8001ed4:	10624dd3 	.word	0x10624dd3

08001ed8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fbbe 	bl	800166c <HAL_GetTick>
 8001ef0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	f040 80e0 	bne.w	80020c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2319      	movs	r3, #25
 8001f06:	2201      	movs	r2, #1
 8001f08:	4970      	ldr	r1, [pc, #448]	; (80020cc <HAL_I2C_Master_Transmit+0x1f4>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fa92 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0d3      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_I2C_Master_Transmit+0x50>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e0cc      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d007      	beq.n	8001f4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	893a      	ldrh	r2, [r7, #8]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a50      	ldr	r2, [pc, #320]	; (80020d0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f90:	8979      	ldrh	r1, [r7, #10]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f9ca 	bl	8002330 <I2C_MasterRequestWrite>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e08d      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fbc:	e066      	b.n	800208c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fb50 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d107      	bne.n	8001fe6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11b      	bne.n	8002060 <HAL_I2C_Master_Transmit+0x188>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	d017      	beq.n	8002060 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	6a39      	ldr	r1, [r7, #32]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fb47 	bl	80026f8 <I2C_WaitOnBTFFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	2b04      	cmp	r3, #4
 8002076:	d107      	bne.n	8002088 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e01a      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d194      	bne.n	8001fbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	e000      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020c0:	2302      	movs	r3, #2
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	00100002 	.word	0x00100002
 80020d0:	ffff0000 	.word	0xffff0000

080020d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	460b      	mov	r3, r1
 80020e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff fac2 	bl	800166c <HAL_GetTick>
 80020e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	f040 8111 	bne.w	800231e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2319      	movs	r3, #25
 8002102:	2201      	movs	r2, #1
 8002104:	4988      	ldr	r1, [pc, #544]	; (8002328 <HAL_I2C_IsDeviceReady+0x254>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f994 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002112:	2302      	movs	r3, #2
 8002114:	e104      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_I2C_IsDeviceReady+0x50>
 8002120:	2302      	movs	r3, #2
 8002122:	e0fd      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x24c>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d007      	beq.n	800214a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2224      	movs	r2, #36	; 0x24
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a70      	ldr	r2, [pc, #448]	; (800232c <HAL_I2C_IsDeviceReady+0x258>)
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2200      	movs	r2, #0
 8002186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f952 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a4:	d103      	bne.n	80021ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0b6      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fa53 	bl	800166c <HAL_GetTick>
 80021c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021f6:	e025      	b.n	8002244 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021f8:	f7ff fa38 	bl	800166c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d302      	bcc.n	800220e <HAL_I2C_IsDeviceReady+0x13a>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	22a0      	movs	r2, #160	; 0xa0
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2ba0      	cmp	r3, #160	; 0xa0
 800224e:	d005      	beq.n	800225c <HAL_I2C_IsDeviceReady+0x188>
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_I2C_IsDeviceReady+0x188>
 8002256:	7dbb      	ldrb	r3, [r7, #22]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0cd      	beq.n	80021f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b02      	cmp	r3, #2
 8002270:	d129      	bne.n	80022c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002280:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2319      	movs	r3, #25
 800229e:	2201      	movs	r2, #1
 80022a0:	4921      	ldr	r1, [pc, #132]	; (8002328 <HAL_I2C_IsDeviceReady+0x254>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f8c6 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e036      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e02c      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2319      	movs	r3, #25
 80022e6:	2201      	movs	r2, #1
 80022e8:	490f      	ldr	r1, [pc, #60]	; (8002328 <HAL_I2C_IsDeviceReady+0x254>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f8a2 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e012      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	3301      	adds	r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	f4ff af32 	bcc.w	800216e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
  }
}
 8002320:	4618      	mov	r0, r3
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	00100002 	.word	0x00100002
 800232c:	ffff0000 	.word	0xffff0000

08002330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d006      	beq.n	800235a <I2C_MasterRequestWrite+0x2a>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <I2C_MasterRequestWrite+0x2a>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002358:	d108      	bne.n	800236c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e00b      	b.n	8002384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	2b12      	cmp	r3, #18
 8002372:	d107      	bne.n	8002384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f84f 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023aa:	d103      	bne.n	80023b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e035      	b.n	8002424 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023c0:	d108      	bne.n	80023d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	e01b      	b.n	800240c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023d4:	897b      	ldrh	r3, [r7, #10]
 80023d6:	11db      	asrs	r3, r3, #7
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f003 0306 	and.w	r3, r3, #6
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f063 030f 	orn	r3, r3, #15
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	490e      	ldr	r1, [pc, #56]	; (800242c <I2C_MasterRequestWrite+0xfc>)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f898 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e010      	b.n	8002424 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4907      	ldr	r1, [pc, #28]	; (8002430 <I2C_MasterRequestWrite+0x100>)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f888 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	00010008 	.word	0x00010008
 8002430:	00010002 	.word	0x00010002

08002434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002444:	e048      	b.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d044      	beq.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244e:	f7ff f90d 	bl	800166c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d139      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	0c1b      	lsrs	r3, r3, #16
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10d      	bne.n	800248a <I2C_WaitOnFlagUntilTimeout+0x56>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	43da      	mvns	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	e00c      	b.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	43da      	mvns	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d116      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e023      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10d      	bne.n	80024fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	e00c      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	43da      	mvns	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d093      	beq.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002536:	e071      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d123      	bne.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e067      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d041      	beq.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002598:	f7ff f868 	bl	800166c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d302      	bcc.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d136      	bne.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10c      	bne.n	80025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	e00b      	b.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	43da      	mvns	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e021      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10c      	bne.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	43da      	mvns	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e00b      	b.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f af6d 	bne.w	8002538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	e034      	b.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f886 	bl	8002788 <I2C_IsAcknowledgeFailed>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e034      	b.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d028      	beq.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe ffed 	bl	800166c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11d      	bne.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d016      	beq.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e007      	b.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	d1c3      	bne.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002704:	e034      	b.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f83e 	bl	8002788 <I2C_IsAcknowledgeFailed>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e034      	b.n	8002780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d028      	beq.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe ffa5 	bl	800166c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11d      	bne.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d016      	beq.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d1c3      	bne.n	8002706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d11b      	bne.n	80027d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0cc      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d90c      	bls.n	8002824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	494d      	ldr	r1, [pc, #308]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d044      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e067      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4934      	ldr	r1, [pc, #208]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7fe fec8 	bl	800166c <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fec4 	bl	800166c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20c      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e032      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4916      	ldr	r1, [pc, #88]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	490e      	ldr	r1, [pc, #56]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296e:	f000 f887 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002972:	4602      	mov	r2, r0
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	490a      	ldr	r1, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fd12 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	08005844 	.word	0x08005844
 80029ac:	20000008 	.word	0x20000008
 80029b0:	2000000c 	.word	0x2000000c

080029b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000008 	.word	0x20000008

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029d0:	f7ff fff0 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08005854 	.word	0x08005854

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029f8:	f7ff ffdc 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0b5b      	lsrs	r3, r3, #13
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4903      	ldr	r1, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08005854 	.word	0x08005854

08002a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	220f      	movs	r2, #15
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0203 	and.w	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_RCC_GetClockConfig+0x60>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 020f 	and.w	r2, r3, #15
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40023c00 	.word	0x40023c00

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b0ae      	sub	sp, #184	; 0xb8
 8002a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa6:	4bcb      	ldr	r3, [pc, #812]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	f200 8206 	bhi.w	8002ec0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002af1 	.word	0x08002af1
 8002ac0:	08002ec1 	.word	0x08002ec1
 8002ac4:	08002ec1 	.word	0x08002ec1
 8002ac8:	08002ec1 	.word	0x08002ec1
 8002acc:	08002af9 	.word	0x08002af9
 8002ad0:	08002ec1 	.word	0x08002ec1
 8002ad4:	08002ec1 	.word	0x08002ec1
 8002ad8:	08002ec1 	.word	0x08002ec1
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002ec1 	.word	0x08002ec1
 8002ae4:	08002ec1 	.word	0x08002ec1
 8002ae8:	08002ec1 	.word	0x08002ec1
 8002aec:	08002cf1 	.word	0x08002cf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4bb9      	ldr	r3, [pc, #740]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002af6:	e1e7      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4bb8      	ldr	r3, [pc, #736]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002afe:	e1e3      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4bb4      	ldr	r3, [pc, #720]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0c:	4bb1      	ldr	r3, [pc, #708]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d071      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4bae      	ldr	r3, [pc, #696]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4621      	mov	r1, r4
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	6439      	str	r1, [r7, #64]	; 0x40
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	647b      	str	r3, [r7, #68]	; 0x44
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b70:	4649      	mov	r1, r9
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4641      	mov	r1, r8
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4641      	mov	r1, r8
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b84:	4649      	mov	r1, r9
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b98:	4649      	mov	r1, r9
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4622      	mov	r2, r4
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bc8:	4629      	mov	r1, r5
 8002bca:	024b      	lsls	r3, r1, #9
 8002bcc:	4621      	mov	r1, r4
 8002bce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	024a      	lsls	r2, r1, #9
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002be8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bec:	f7fd fb68 	bl	80002c0 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bfa:	e067      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c08:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c16:	2300      	movs	r3, #0
 8002c18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c1e:	4622      	mov	r2, r4
 8002c20:	462b      	mov	r3, r5
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	0159      	lsls	r1, r3, #5
 8002c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c30:	0150      	lsls	r0, r2, #5
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4621      	mov	r1, r4
 8002c38:	1a51      	subs	r1, r2, r1
 8002c3a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c50:	4649      	mov	r1, r9
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	018a      	lsls	r2, r1, #6
 8002c5e:	4641      	mov	r1, r8
 8002c60:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c64:	4649      	mov	r1, r9
 8002c66:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c7e:	4692      	mov	sl, r2
 8002c80:	469b      	mov	fp, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	eb1a 0303 	adds.w	r3, sl, r3
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	462b      	mov	r3, r5
 8002c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	028b      	lsls	r3, r1, #10
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca8:	4621      	mov	r1, r4
 8002caa:	028a      	lsls	r2, r1, #10
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8002cb8:	677a      	str	r2, [r7, #116]	; 0x74
 8002cba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cbe:	f7fd faff 	bl	80002c0 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cee:	e0eb      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf0:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfc:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d06b      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	2200      	movs	r2, #0
 8002d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d24:	4622      	mov	r2, r4
 8002d26:	462b      	mov	r3, r5
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0159      	lsls	r1, r3, #5
 8002d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d36:	0150      	lsls	r0, r2, #5
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	1a51      	subs	r1, r2, r1
 8002d40:	61b9      	str	r1, [r7, #24]
 8002d42:	4629      	mov	r1, r5
 8002d44:	eb63 0301 	sbc.w	r3, r3, r1
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d56:	4659      	mov	r1, fp
 8002d58:	018b      	lsls	r3, r1, #6
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d60:	4651      	mov	r1, sl
 8002d62:	018a      	lsls	r2, r1, #6
 8002d64:	4651      	mov	r1, sl
 8002d66:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d84:	4690      	mov	r8, r2
 8002d86:	4699      	mov	r9, r3
 8002d88:	4623      	mov	r3, r4
 8002d8a:	eb18 0303 	adds.w	r3, r8, r3
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	462b      	mov	r3, r5
 8002d92:	eb49 0303 	adc.w	r3, r9, r3
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002da4:	4629      	mov	r1, r5
 8002da6:	024b      	lsls	r3, r1, #9
 8002da8:	4621      	mov	r1, r4
 8002daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dae:	4621      	mov	r1, r4
 8002db0:	024a      	lsls	r2, r1, #9
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dba:	2200      	movs	r2, #0
 8002dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dbe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dc4:	f7fd fa7c 	bl	80002c0 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dd2:	e065      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x420>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	2200      	movs	r2, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	4611      	mov	r1, r2
 8002dec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df0:	653b      	str	r3, [r7, #80]	; 0x50
 8002df2:	2300      	movs	r3, #0
 8002df4:	657b      	str	r3, [r7, #84]	; 0x54
 8002df6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4641      	mov	r1, r8
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	4649      	mov	r1, r9
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4651      	mov	r1, sl
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	1a54      	subs	r4, r2, r1
 8002e3e:	4659      	mov	r1, fp
 8002e40:	eb63 0501 	sbc.w	r5, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e52:	00e2      	lsls	r2, r4, #3
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	4643      	mov	r3, r8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e88:	2200      	movs	r2, #0
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e8c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e92:	f7fd fa15 	bl	80002c0 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0f1b      	lsrs	r3, r3, #28
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ebe:	e003      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	37b8      	adds	r7, #184	; 0xb8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400

08002ee0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e28d      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8083 	beq.w	8003006 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f00:	4b94      	ldr	r3, [pc, #592]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d019      	beq.n	8002f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f0c:	4b91      	ldr	r3, [pc, #580]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f18:	4b8e      	ldr	r3, [pc, #568]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d112      	bne.n	8002f58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b84      	ldr	r3, [pc, #528]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x124>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e25a      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x90>
 8002f62:	4b7c      	ldr	r3, [pc, #496]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7b      	ldr	r2, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xcc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0xb4>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a72      	ldr	r2, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xcc>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6b      	ldr	r2, [pc, #428]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fb5a 	bl	800166c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fb56 	bl	800166c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e21f      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xdc>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fb46 	bl	800166c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fb42 	bl	800166c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e20b      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x104>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06f      	beq.n	80030f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003012:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800301e:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d105      	bne.n	8003036 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b44      	ldr	r3, [pc, #272]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x186>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1d3      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_OscConfig+0x278>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe faef 	bl	800166c <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe faeb 	bl	800166c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1b4      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4925      	ldr	r1, [pc, #148]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_OscConfig+0x278>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe face 	bl	800166c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe faca 	bl	800166c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e193      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d036      	beq.n	800316c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe faae 	bl	800166c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe faaa 	bl	800166c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e173      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x274>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x234>
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_OscConfig+0x27c>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe fa97 	bl	800166c <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00e      	b.n	8003160 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003142:	f7fe fa93 	bl	800166c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d907      	bls.n	8003160 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e15c      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b8a      	ldr	r3, [pc, #552]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ea      	bne.n	8003142 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8097 	beq.w	80032a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b83      	ldr	r3, [pc, #524]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b7f      	ldr	r3, [pc, #508]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a7e      	ldr	r2, [pc, #504]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b7c      	ldr	r3, [pc, #496]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b79      	ldr	r3, [pc, #484]	; (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a75      	ldr	r2, [pc, #468]	; (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe fa53 	bl	800166c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe fa4f 	bl	800166c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e118      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b6c      	ldr	r3, [pc, #432]	; (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x31e>
 80031f0:	4b66      	ldr	r3, [pc, #408]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a65      	ldr	r2, [pc, #404]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	e01c      	b.n	8003238 <HAL_RCC_OscConfig+0x358>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x340>
 8003206:	4b61      	ldr	r3, [pc, #388]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a60      	ldr	r2, [pc, #384]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a5d      	ldr	r2, [pc, #372]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x358>
 8003220:	4b5a      	ldr	r3, [pc, #360]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a59      	ldr	r2, [pc, #356]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	4b57      	ldr	r3, [pc, #348]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a56      	ldr	r2, [pc, #344]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe fa14 	bl	800166c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe fa10 	bl	800166c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0d7      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ee      	beq.n	8003248 <HAL_RCC_OscConfig+0x368>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe f9fe 	bl	800166c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe f9fa 	bl	800166c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0c1      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ee      	bne.n	8003274 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	4a3a      	ldr	r2, [pc, #232]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80ad 	beq.w	800340c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d060      	beq.n	8003380 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d145      	bne.n	8003352 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b33      	ldr	r3, [pc, #204]	; (8003394 <HAL_RCC_OscConfig+0x4b4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe f9ce 	bl	800166c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe f9ca 	bl	800166c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e093      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	491b      	ldr	r1, [pc, #108]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4b4>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe f99f 	bl	800166c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003332:	f7fe f99b 	bl	800166c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e064      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x452>
 8003350:	e05c      	b.n	800340c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCC_OscConfig+0x4b4>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe f988 	bl	800166c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe f984 	bl	800166c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e04d      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x480>
 800337e:	e045      	b.n	800340c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e040      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 800338c:	40023800 	.word	0x40023800
 8003390:	40007000 	.word	0x40007000
 8003394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003398:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <HAL_RCC_OscConfig+0x538>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d030      	beq.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d129      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d122      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d119      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d10f      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e041      	b.n	80034b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f839 	bl	80034ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f000 f9c0 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d001      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04e      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_TIM_Base_Start_IT+0xc4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d01d      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_TIM_Base_Start_IT+0xc8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d018      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_TIM_Base_Start_IT+0xcc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d013      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x80>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_TIM_Base_Start_IT+0xdc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b06      	cmp	r3, #6
 8003560:	d010      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e007      	b.n	8003584 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0202 	mvn.w	r2, #2
 80035e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8d2 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8c4 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f8d5 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8ac 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f89e 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8af 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f886 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f878 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f889 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0210 	mvn.w	r2, #16
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2208      	movs	r2, #8
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f860 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f852 	bl	8003790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f863 	bl	80037b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0201 	mvn.w	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fabe 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f906 	bl	800394c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f834 	bl	80037cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0220 	mvn.w	r2, #32
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8d8 	bl	8003938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a46      	ldr	r2, [pc, #280]	; (800390c <TIM_Base_SetConfig+0x12c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a43      	ldr	r2, [pc, #268]	; (8003910 <TIM_Base_SetConfig+0x130>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a42      	ldr	r2, [pc, #264]	; (8003914 <TIM_Base_SetConfig+0x134>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a41      	ldr	r2, [pc, #260]	; (8003918 <TIM_Base_SetConfig+0x138>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a40      	ldr	r2, [pc, #256]	; (800391c <TIM_Base_SetConfig+0x13c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d108      	bne.n	8003832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a35      	ldr	r2, [pc, #212]	; (800390c <TIM_Base_SetConfig+0x12c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003840:	d027      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a32      	ldr	r2, [pc, #200]	; (8003910 <TIM_Base_SetConfig+0x130>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d023      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <TIM_Base_SetConfig+0x134>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a30      	ldr	r2, [pc, #192]	; (8003918 <TIM_Base_SetConfig+0x138>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2f      	ldr	r2, [pc, #188]	; (800391c <TIM_Base_SetConfig+0x13c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d017      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2e      	ldr	r2, [pc, #184]	; (8003920 <TIM_Base_SetConfig+0x140>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <TIM_Base_SetConfig+0x144>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <TIM_Base_SetConfig+0x148>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <TIM_Base_SetConfig+0x14c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <TIM_Base_SetConfig+0x150>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a29      	ldr	r2, [pc, #164]	; (8003934 <TIM_Base_SetConfig+0x154>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <TIM_Base_SetConfig+0x12c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_Base_SetConfig+0xf8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <TIM_Base_SetConfig+0x13c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d103      	bne.n	80038e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	611a      	str	r2, [r3, #16]
  }
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40010400 	.word	0x40010400
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	40001800 	.word	0x40001800
 8003930:	40001c00 	.word	0x40001c00
 8003934:	40002000 	.word	0x40002000

08003938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e042      	b.n	80039f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fcce 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f973 	bl	8003c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d175      	bne.n	8003b0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Transmit+0x2c>
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e06e      	b.n	8003b0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2221      	movs	r2, #33	; 0x21
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fe15 	bl	800166c <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a58:	d108      	bne.n	8003a6c <HAL_UART_Transmit+0x6c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e003      	b.n	8003a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a74:	e02e      	b.n	8003ad4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2180      	movs	r1, #128	; 0x80
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f848 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e03a      	b.n	8003b0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e007      	b.n	8003ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1cb      	bne.n	8003a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2140      	movs	r1, #64	; 0x40
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f814 	bl	8003b16 <UART_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e006      	b.n	8003b0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	4613      	mov	r3, r2
 8003b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	e03b      	b.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d037      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b30:	f7fd fd9c 	bl	800166c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d302      	bcc.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e03a      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d023      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b80      	cmp	r3, #128	; 0x80
 8003b5c:	d020      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d01d      	beq.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d116      	bne.n	8003ba0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f81d 	bl	8003bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2208      	movs	r2, #8
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e00f      	b.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d0b4      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b095      	sub	sp, #84	; 0x54
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bf0:	643a      	str	r2, [r7, #64]	; 0x40
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d119      	bne.n	8003c74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0310 	bic.w	r3, r3, #16
 8003c56:	647b      	str	r3, [r7, #68]	; 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c60:	61ba      	str	r2, [r7, #24]
 8003c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6979      	ldr	r1, [r7, #20]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e5      	bne.n	8003c40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c82:	bf00      	nop
 8003c84:	3754      	adds	r7, #84	; 0x54
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c94:	b0c0      	sub	sp, #256	; 0x100
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	68d9      	ldr	r1, [r3, #12]
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	ea40 0301 	orr.w	r3, r0, r1
 8003cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ce8:	f021 010c 	bic.w	r1, r1, #12
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf6:	430b      	orrs	r3, r1
 8003cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	6999      	ldr	r1, [r3, #24]
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	ea40 0301 	orr.w	r3, r0, r1
 8003d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b8f      	ldr	r3, [pc, #572]	; (8003f5c <UART_SetConfig+0x2cc>)
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d005      	beq.n	8003d30 <UART_SetConfig+0xa0>
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b8d      	ldr	r3, [pc, #564]	; (8003f60 <UART_SetConfig+0x2d0>)
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d104      	bne.n	8003d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7fe fe60 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8003d34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d38:	e003      	b.n	8003d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d3a:	f7fe fe47 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8003d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	f040 810c 	bne.w	8003f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d54:	2200      	movs	r2, #0
 8003d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d62:	4622      	mov	r2, r4
 8003d64:	462b      	mov	r3, r5
 8003d66:	1891      	adds	r1, r2, r2
 8003d68:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d6a:	415b      	adcs	r3, r3
 8003d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d72:	4621      	mov	r1, r4
 8003d74:	eb12 0801 	adds.w	r8, r2, r1
 8003d78:	4629      	mov	r1, r5
 8003d7a:	eb43 0901 	adc.w	r9, r3, r1
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d92:	4690      	mov	r8, r2
 8003d94:	4699      	mov	r9, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	eb18 0303 	adds.w	r3, r8, r3
 8003d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003da0:	462b      	mov	r3, r5
 8003da2:	eb49 0303 	adc.w	r3, r9, r3
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003db6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	18db      	adds	r3, r3, r3
 8003dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	eb42 0303 	adc.w	r3, r2, r3
 8003dca:	657b      	str	r3, [r7, #84]	; 0x54
 8003dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003dd4:	f7fc fa74 	bl	80002c0 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003dde:	fba3 2302 	umull	r2, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	011c      	lsls	r4, r3, #4
 8003de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	1891      	adds	r1, r2, r2
 8003dfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e00:	415b      	adcs	r3, r3
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e08:	4641      	mov	r1, r8
 8003e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e0e:	4649      	mov	r1, r9
 8003e10:	eb43 0b01 	adc.w	fp, r3, r1
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e28:	4692      	mov	sl, r2
 8003e2a:	469b      	mov	fp, r3
 8003e2c:	4643      	mov	r3, r8
 8003e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e36:	464b      	mov	r3, r9
 8003e38:	eb4b 0303 	adc.w	r3, fp, r3
 8003e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e54:	460b      	mov	r3, r1
 8003e56:	18db      	adds	r3, r3, r3
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
 8003e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e6a:	f7fc fa29 	bl	80002c0 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003e76:	fba3 2301 	umull	r2, r3, r3, r1
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2264      	movs	r2, #100	; 0x64
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	1acb      	subs	r3, r1, r3
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e98:	441c      	add	r4, r3
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	1851      	adds	r1, r2, r1
 8003ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	414b      	adcs	r3, r1
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	00cb      	lsls	r3, r1, #3
 8003ed8:	4651      	mov	r1, sl
 8003eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ede:	4651      	mov	r1, sl
 8003ee0:	00ca      	lsls	r2, r1, #3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef0:	464b      	mov	r3, r9
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	eb42 0303 	adc.w	r3, r2, r3
 8003ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f10:	460b      	mov	r3, r1
 8003f12:	18db      	adds	r3, r3, r3
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f16:	4613      	mov	r3, r2
 8003f18:	eb42 0303 	adc.w	r3, r2, r3
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f26:	f7fc f9cb 	bl	80002c0 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003f30:	fba3 1302 	umull	r1, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	2164      	movs	r1, #100	; 0x64
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	3332      	adds	r3, #50	; 0x32
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <UART_SetConfig+0x2d4>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	f003 0207 	and.w	r2, r3, #7
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4422      	add	r2, r4
 8003f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f58:	e106      	b.n	8004168 <UART_SetConfig+0x4d8>
 8003f5a:	bf00      	nop
 8003f5c:	40011000 	.word	0x40011000
 8003f60:	40011400 	.word	0x40011400
 8003f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f7a:	4642      	mov	r2, r8
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	6239      	str	r1, [r7, #32]
 8003f82:	415b      	adcs	r3, r3
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	1854      	adds	r4, r2, r1
 8003f8e:	4649      	mov	r1, r9
 8003f90:	eb43 0501 	adc.w	r5, r3, r1
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	00eb      	lsls	r3, r5, #3
 8003f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa2:	00e2      	lsls	r2, r4, #3
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	4643      	mov	r3, r8
 8003faa:	18e3      	adds	r3, r4, r3
 8003fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	eb45 0303 	adc.w	r3, r5, r3
 8003fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	4621      	mov	r1, r4
 8003fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	008a      	lsls	r2, r1, #2
 8003fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fe8:	f7fc f96a 	bl	80002c0 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b60      	ldr	r3, [pc, #384]	; (8004174 <UART_SetConfig+0x4e4>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011c      	lsls	r4, r3, #4
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004004:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	61b9      	str	r1, [r7, #24]
 8004014:	415b      	adcs	r3, r3
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800401c:	4641      	mov	r1, r8
 800401e:	1851      	adds	r1, r2, r1
 8004020:	6139      	str	r1, [r7, #16]
 8004022:	4649      	mov	r1, r9
 8004024:	414b      	adcs	r3, r1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004034:	4659      	mov	r1, fp
 8004036:	00cb      	lsls	r3, r1, #3
 8004038:	4651      	mov	r1, sl
 800403a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403e:	4651      	mov	r1, sl
 8004040:	00ca      	lsls	r2, r1, #3
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	4603      	mov	r3, r0
 8004048:	4642      	mov	r2, r8
 800404a:	189b      	adds	r3, r3, r2
 800404c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004050:	464b      	mov	r3, r9
 8004052:	460a      	mov	r2, r1
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	67bb      	str	r3, [r7, #120]	; 0x78
 8004066:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004074:	4649      	mov	r1, r9
 8004076:	008b      	lsls	r3, r1, #2
 8004078:	4641      	mov	r1, r8
 800407a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800407e:	4641      	mov	r1, r8
 8004080:	008a      	lsls	r2, r1, #2
 8004082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004086:	f7fc f91b 	bl	80002c0 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4611      	mov	r1, r2
 8004090:	4b38      	ldr	r3, [pc, #224]	; (8004174 <UART_SetConfig+0x4e4>)
 8004092:	fba3 2301 	umull	r2, r3, r3, r1
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2264      	movs	r2, #100	; 0x64
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	1acb      	subs	r3, r1, r3
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	3332      	adds	r3, #50	; 0x32
 80040a4:	4a33      	ldr	r2, [pc, #204]	; (8004174 <UART_SetConfig+0x4e4>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b0:	441c      	add	r4, r3
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	673b      	str	r3, [r7, #112]	; 0x70
 80040ba:	677a      	str	r2, [r7, #116]	; 0x74
 80040bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	66bb      	str	r3, [r7, #104]	; 0x68
 8004102:	464b      	mov	r3, r9
 8004104:	460a      	mov	r2, r1
 8004106:	eb42 0303 	adc.w	r3, r2, r3
 800410a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	663b      	str	r3, [r7, #96]	; 0x60
 8004116:	667a      	str	r2, [r7, #100]	; 0x64
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004124:	4649      	mov	r1, r9
 8004126:	008b      	lsls	r3, r1, #2
 8004128:	4641      	mov	r1, r8
 800412a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800412e:	4641      	mov	r1, r8
 8004130:	008a      	lsls	r2, r1, #2
 8004132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004136:	f7fc f8c3 	bl	80002c0 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <UART_SetConfig+0x4e4>)
 8004140:	fba3 1302 	umull	r1, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	2164      	movs	r1, #100	; 0x64
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	3332      	adds	r3, #50	; 0x32
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <UART_SetConfig+0x4e4>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4422      	add	r2, r4
 8004166:	609a      	str	r2, [r3, #8]
}
 8004168:	bf00      	nop
 800416a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800416e:	46bd      	mov	sp, r7
 8004170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004174:	51eb851f 	.word	0x51eb851f

08004178 <siprintf>:
 8004178:	b40e      	push	{r1, r2, r3}
 800417a:	b500      	push	{lr}
 800417c:	b09c      	sub	sp, #112	; 0x70
 800417e:	ab1d      	add	r3, sp, #116	; 0x74
 8004180:	9002      	str	r0, [sp, #8]
 8004182:	9006      	str	r0, [sp, #24]
 8004184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004188:	4809      	ldr	r0, [pc, #36]	; (80041b0 <siprintf+0x38>)
 800418a:	9107      	str	r1, [sp, #28]
 800418c:	9104      	str	r1, [sp, #16]
 800418e:	4909      	ldr	r1, [pc, #36]	; (80041b4 <siprintf+0x3c>)
 8004190:	f853 2b04 	ldr.w	r2, [r3], #4
 8004194:	9105      	str	r1, [sp, #20]
 8004196:	6800      	ldr	r0, [r0, #0]
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	a902      	add	r1, sp, #8
 800419c:	f000 f992 	bl	80044c4 <_svfiprintf_r>
 80041a0:	9b02      	ldr	r3, [sp, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	b01c      	add	sp, #112	; 0x70
 80041a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041ac:	b003      	add	sp, #12
 80041ae:	4770      	bx	lr
 80041b0:	20000060 	.word	0x20000060
 80041b4:	ffff0208 	.word	0xffff0208

080041b8 <memset>:
 80041b8:	4402      	add	r2, r0
 80041ba:	4603      	mov	r3, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	f803 1b01 	strb.w	r1, [r3], #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <__errno>:
 80041c8:	4b01      	ldr	r3, [pc, #4]	; (80041d0 <__errno+0x8>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000060 	.word	0x20000060

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4d0d      	ldr	r5, [pc, #52]	; (800420c <__libc_init_array+0x38>)
 80041d8:	4c0d      	ldr	r4, [pc, #52]	; (8004210 <__libc_init_array+0x3c>)
 80041da:	1b64      	subs	r4, r4, r5
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	2600      	movs	r6, #0
 80041e0:	42a6      	cmp	r6, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	4d0b      	ldr	r5, [pc, #44]	; (8004214 <__libc_init_array+0x40>)
 80041e6:	4c0c      	ldr	r4, [pc, #48]	; (8004218 <__libc_init_array+0x44>)
 80041e8:	f000 fc6a 	bl	8004ac0 <_init>
 80041ec:	1b64      	subs	r4, r4, r5
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	2600      	movs	r6, #0
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fc:	4798      	blx	r3
 80041fe:	3601      	adds	r6, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	f855 3b04 	ldr.w	r3, [r5], #4
 8004206:	4798      	blx	r3
 8004208:	3601      	adds	r6, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	08005898 	.word	0x08005898
 8004210:	08005898 	.word	0x08005898
 8004214:	08005898 	.word	0x08005898
 8004218:	0800589c 	.word	0x0800589c

0800421c <__retarget_lock_acquire_recursive>:
 800421c:	4770      	bx	lr

0800421e <__retarget_lock_release_recursive>:
 800421e:	4770      	bx	lr

08004220 <_free_r>:
 8004220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004222:	2900      	cmp	r1, #0
 8004224:	d044      	beq.n	80042b0 <_free_r+0x90>
 8004226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422a:	9001      	str	r0, [sp, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f1a1 0404 	sub.w	r4, r1, #4
 8004232:	bfb8      	it	lt
 8004234:	18e4      	addlt	r4, r4, r3
 8004236:	f000 f8df 	bl	80043f8 <__malloc_lock>
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <_free_r+0x94>)
 800423c:	9801      	ldr	r0, [sp, #4]
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	b933      	cbnz	r3, 8004250 <_free_r+0x30>
 8004242:	6063      	str	r3, [r4, #4]
 8004244:	6014      	str	r4, [r2, #0]
 8004246:	b003      	add	sp, #12
 8004248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800424c:	f000 b8da 	b.w	8004404 <__malloc_unlock>
 8004250:	42a3      	cmp	r3, r4
 8004252:	d908      	bls.n	8004266 <_free_r+0x46>
 8004254:	6825      	ldr	r5, [r4, #0]
 8004256:	1961      	adds	r1, r4, r5
 8004258:	428b      	cmp	r3, r1
 800425a:	bf01      	itttt	eq
 800425c:	6819      	ldreq	r1, [r3, #0]
 800425e:	685b      	ldreq	r3, [r3, #4]
 8004260:	1949      	addeq	r1, r1, r5
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	e7ed      	b.n	8004242 <_free_r+0x22>
 8004266:	461a      	mov	r2, r3
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b10b      	cbz	r3, 8004270 <_free_r+0x50>
 800426c:	42a3      	cmp	r3, r4
 800426e:	d9fa      	bls.n	8004266 <_free_r+0x46>
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	1855      	adds	r5, r2, r1
 8004274:	42a5      	cmp	r5, r4
 8004276:	d10b      	bne.n	8004290 <_free_r+0x70>
 8004278:	6824      	ldr	r4, [r4, #0]
 800427a:	4421      	add	r1, r4
 800427c:	1854      	adds	r4, r2, r1
 800427e:	42a3      	cmp	r3, r4
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	d1e0      	bne.n	8004246 <_free_r+0x26>
 8004284:	681c      	ldr	r4, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	6053      	str	r3, [r2, #4]
 800428a:	440c      	add	r4, r1
 800428c:	6014      	str	r4, [r2, #0]
 800428e:	e7da      	b.n	8004246 <_free_r+0x26>
 8004290:	d902      	bls.n	8004298 <_free_r+0x78>
 8004292:	230c      	movs	r3, #12
 8004294:	6003      	str	r3, [r0, #0]
 8004296:	e7d6      	b.n	8004246 <_free_r+0x26>
 8004298:	6825      	ldr	r5, [r4, #0]
 800429a:	1961      	adds	r1, r4, r5
 800429c:	428b      	cmp	r3, r1
 800429e:	bf04      	itt	eq
 80042a0:	6819      	ldreq	r1, [r3, #0]
 80042a2:	685b      	ldreq	r3, [r3, #4]
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	bf04      	itt	eq
 80042a8:	1949      	addeq	r1, r1, r5
 80042aa:	6021      	streq	r1, [r4, #0]
 80042ac:	6054      	str	r4, [r2, #4]
 80042ae:	e7ca      	b.n	8004246 <_free_r+0x26>
 80042b0:	b003      	add	sp, #12
 80042b2:	bd30      	pop	{r4, r5, pc}
 80042b4:	200006bc 	.word	0x200006bc

080042b8 <sbrk_aligned>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4e0e      	ldr	r6, [pc, #56]	; (80042f4 <sbrk_aligned+0x3c>)
 80042bc:	460c      	mov	r4, r1
 80042be:	6831      	ldr	r1, [r6, #0]
 80042c0:	4605      	mov	r5, r0
 80042c2:	b911      	cbnz	r1, 80042ca <sbrk_aligned+0x12>
 80042c4:	f000 fba6 	bl	8004a14 <_sbrk_r>
 80042c8:	6030      	str	r0, [r6, #0]
 80042ca:	4621      	mov	r1, r4
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 fba1 	bl	8004a14 <_sbrk_r>
 80042d2:	1c43      	adds	r3, r0, #1
 80042d4:	d00a      	beq.n	80042ec <sbrk_aligned+0x34>
 80042d6:	1cc4      	adds	r4, r0, #3
 80042d8:	f024 0403 	bic.w	r4, r4, #3
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d007      	beq.n	80042f0 <sbrk_aligned+0x38>
 80042e0:	1a21      	subs	r1, r4, r0
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 fb96 	bl	8004a14 <_sbrk_r>
 80042e8:	3001      	adds	r0, #1
 80042ea:	d101      	bne.n	80042f0 <sbrk_aligned+0x38>
 80042ec:	f04f 34ff 	mov.w	r4, #4294967295
 80042f0:	4620      	mov	r0, r4
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	200006c0 	.word	0x200006c0

080042f8 <_malloc_r>:
 80042f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042fc:	1ccd      	adds	r5, r1, #3
 80042fe:	f025 0503 	bic.w	r5, r5, #3
 8004302:	3508      	adds	r5, #8
 8004304:	2d0c      	cmp	r5, #12
 8004306:	bf38      	it	cc
 8004308:	250c      	movcc	r5, #12
 800430a:	2d00      	cmp	r5, #0
 800430c:	4607      	mov	r7, r0
 800430e:	db01      	blt.n	8004314 <_malloc_r+0x1c>
 8004310:	42a9      	cmp	r1, r5
 8004312:	d905      	bls.n	8004320 <_malloc_r+0x28>
 8004314:	230c      	movs	r3, #12
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	2600      	movs	r6, #0
 800431a:	4630      	mov	r0, r6
 800431c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043f4 <_malloc_r+0xfc>
 8004324:	f000 f868 	bl	80043f8 <__malloc_lock>
 8004328:	f8d8 3000 	ldr.w	r3, [r8]
 800432c:	461c      	mov	r4, r3
 800432e:	bb5c      	cbnz	r4, 8004388 <_malloc_r+0x90>
 8004330:	4629      	mov	r1, r5
 8004332:	4638      	mov	r0, r7
 8004334:	f7ff ffc0 	bl	80042b8 <sbrk_aligned>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	4604      	mov	r4, r0
 800433c:	d155      	bne.n	80043ea <_malloc_r+0xf2>
 800433e:	f8d8 4000 	ldr.w	r4, [r8]
 8004342:	4626      	mov	r6, r4
 8004344:	2e00      	cmp	r6, #0
 8004346:	d145      	bne.n	80043d4 <_malloc_r+0xdc>
 8004348:	2c00      	cmp	r4, #0
 800434a:	d048      	beq.n	80043de <_malloc_r+0xe6>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	4631      	mov	r1, r6
 8004350:	4638      	mov	r0, r7
 8004352:	eb04 0903 	add.w	r9, r4, r3
 8004356:	f000 fb5d 	bl	8004a14 <_sbrk_r>
 800435a:	4581      	cmp	r9, r0
 800435c:	d13f      	bne.n	80043de <_malloc_r+0xe6>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	1a6d      	subs	r5, r5, r1
 8004362:	4629      	mov	r1, r5
 8004364:	4638      	mov	r0, r7
 8004366:	f7ff ffa7 	bl	80042b8 <sbrk_aligned>
 800436a:	3001      	adds	r0, #1
 800436c:	d037      	beq.n	80043de <_malloc_r+0xe6>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	442b      	add	r3, r5
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	f8d8 3000 	ldr.w	r3, [r8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d038      	beq.n	80043ee <_malloc_r+0xf6>
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	42a2      	cmp	r2, r4
 8004380:	d12b      	bne.n	80043da <_malloc_r+0xe2>
 8004382:	2200      	movs	r2, #0
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	e00f      	b.n	80043a8 <_malloc_r+0xb0>
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	1b52      	subs	r2, r2, r5
 800438c:	d41f      	bmi.n	80043ce <_malloc_r+0xd6>
 800438e:	2a0b      	cmp	r2, #11
 8004390:	d917      	bls.n	80043c2 <_malloc_r+0xca>
 8004392:	1961      	adds	r1, r4, r5
 8004394:	42a3      	cmp	r3, r4
 8004396:	6025      	str	r5, [r4, #0]
 8004398:	bf18      	it	ne
 800439a:	6059      	strne	r1, [r3, #4]
 800439c:	6863      	ldr	r3, [r4, #4]
 800439e:	bf08      	it	eq
 80043a0:	f8c8 1000 	streq.w	r1, [r8]
 80043a4:	5162      	str	r2, [r4, r5]
 80043a6:	604b      	str	r3, [r1, #4]
 80043a8:	4638      	mov	r0, r7
 80043aa:	f104 060b 	add.w	r6, r4, #11
 80043ae:	f000 f829 	bl	8004404 <__malloc_unlock>
 80043b2:	f026 0607 	bic.w	r6, r6, #7
 80043b6:	1d23      	adds	r3, r4, #4
 80043b8:	1af2      	subs	r2, r6, r3
 80043ba:	d0ae      	beq.n	800431a <_malloc_r+0x22>
 80043bc:	1b9b      	subs	r3, r3, r6
 80043be:	50a3      	str	r3, [r4, r2]
 80043c0:	e7ab      	b.n	800431a <_malloc_r+0x22>
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	6862      	ldr	r2, [r4, #4]
 80043c6:	d1dd      	bne.n	8004384 <_malloc_r+0x8c>
 80043c8:	f8c8 2000 	str.w	r2, [r8]
 80043cc:	e7ec      	b.n	80043a8 <_malloc_r+0xb0>
 80043ce:	4623      	mov	r3, r4
 80043d0:	6864      	ldr	r4, [r4, #4]
 80043d2:	e7ac      	b.n	800432e <_malloc_r+0x36>
 80043d4:	4634      	mov	r4, r6
 80043d6:	6876      	ldr	r6, [r6, #4]
 80043d8:	e7b4      	b.n	8004344 <_malloc_r+0x4c>
 80043da:	4613      	mov	r3, r2
 80043dc:	e7cc      	b.n	8004378 <_malloc_r+0x80>
 80043de:	230c      	movs	r3, #12
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	4638      	mov	r0, r7
 80043e4:	f000 f80e 	bl	8004404 <__malloc_unlock>
 80043e8:	e797      	b.n	800431a <_malloc_r+0x22>
 80043ea:	6025      	str	r5, [r4, #0]
 80043ec:	e7dc      	b.n	80043a8 <_malloc_r+0xb0>
 80043ee:	605b      	str	r3, [r3, #4]
 80043f0:	deff      	udf	#255	; 0xff
 80043f2:	bf00      	nop
 80043f4:	200006bc 	.word	0x200006bc

080043f8 <__malloc_lock>:
 80043f8:	4801      	ldr	r0, [pc, #4]	; (8004400 <__malloc_lock+0x8>)
 80043fa:	f7ff bf0f 	b.w	800421c <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	200006b8 	.word	0x200006b8

08004404 <__malloc_unlock>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__malloc_unlock+0x8>)
 8004406:	f7ff bf0a 	b.w	800421e <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	200006b8 	.word	0x200006b8

08004410 <__ssputs_r>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	688e      	ldr	r6, [r1, #8]
 8004416:	461f      	mov	r7, r3
 8004418:	42be      	cmp	r6, r7
 800441a:	680b      	ldr	r3, [r1, #0]
 800441c:	4682      	mov	sl, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4690      	mov	r8, r2
 8004422:	d82c      	bhi.n	800447e <__ssputs_r+0x6e>
 8004424:	898a      	ldrh	r2, [r1, #12]
 8004426:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800442a:	d026      	beq.n	800447a <__ssputs_r+0x6a>
 800442c:	6965      	ldr	r5, [r4, #20]
 800442e:	6909      	ldr	r1, [r1, #16]
 8004430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004434:	eba3 0901 	sub.w	r9, r3, r1
 8004438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800443c:	1c7b      	adds	r3, r7, #1
 800443e:	444b      	add	r3, r9
 8004440:	106d      	asrs	r5, r5, #1
 8004442:	429d      	cmp	r5, r3
 8004444:	bf38      	it	cc
 8004446:	461d      	movcc	r5, r3
 8004448:	0553      	lsls	r3, r2, #21
 800444a:	d527      	bpl.n	800449c <__ssputs_r+0x8c>
 800444c:	4629      	mov	r1, r5
 800444e:	f7ff ff53 	bl	80042f8 <_malloc_r>
 8004452:	4606      	mov	r6, r0
 8004454:	b360      	cbz	r0, 80044b0 <__ssputs_r+0xa0>
 8004456:	6921      	ldr	r1, [r4, #16]
 8004458:	464a      	mov	r2, r9
 800445a:	f000 faeb 	bl	8004a34 <memcpy>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004468:	81a3      	strh	r3, [r4, #12]
 800446a:	6126      	str	r6, [r4, #16]
 800446c:	6165      	str	r5, [r4, #20]
 800446e:	444e      	add	r6, r9
 8004470:	eba5 0509 	sub.w	r5, r5, r9
 8004474:	6026      	str	r6, [r4, #0]
 8004476:	60a5      	str	r5, [r4, #8]
 8004478:	463e      	mov	r6, r7
 800447a:	42be      	cmp	r6, r7
 800447c:	d900      	bls.n	8004480 <__ssputs_r+0x70>
 800447e:	463e      	mov	r6, r7
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	4632      	mov	r2, r6
 8004484:	4641      	mov	r1, r8
 8004486:	f000 faab 	bl	80049e0 <memmove>
 800448a:	68a3      	ldr	r3, [r4, #8]
 800448c:	1b9b      	subs	r3, r3, r6
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	4433      	add	r3, r6
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	2000      	movs	r0, #0
 8004498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800449c:	462a      	mov	r2, r5
 800449e:	f000 fad7 	bl	8004a50 <_realloc_r>
 80044a2:	4606      	mov	r6, r0
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d1e0      	bne.n	800446a <__ssputs_r+0x5a>
 80044a8:	6921      	ldr	r1, [r4, #16]
 80044aa:	4650      	mov	r0, sl
 80044ac:	f7ff feb8 	bl	8004220 <_free_r>
 80044b0:	230c      	movs	r3, #12
 80044b2:	f8ca 3000 	str.w	r3, [sl]
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	f04f 30ff 	mov.w	r0, #4294967295
 80044c2:	e7e9      	b.n	8004498 <__ssputs_r+0x88>

080044c4 <_svfiprintf_r>:
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	4698      	mov	r8, r3
 80044ca:	898b      	ldrh	r3, [r1, #12]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	b09d      	sub	sp, #116	; 0x74
 80044d0:	4607      	mov	r7, r0
 80044d2:	460d      	mov	r5, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	d50e      	bpl.n	80044f6 <_svfiprintf_r+0x32>
 80044d8:	690b      	ldr	r3, [r1, #16]
 80044da:	b963      	cbnz	r3, 80044f6 <_svfiprintf_r+0x32>
 80044dc:	2140      	movs	r1, #64	; 0x40
 80044de:	f7ff ff0b 	bl	80042f8 <_malloc_r>
 80044e2:	6028      	str	r0, [r5, #0]
 80044e4:	6128      	str	r0, [r5, #16]
 80044e6:	b920      	cbnz	r0, 80044f2 <_svfiprintf_r+0x2e>
 80044e8:	230c      	movs	r3, #12
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e0d0      	b.n	8004694 <_svfiprintf_r+0x1d0>
 80044f2:	2340      	movs	r3, #64	; 0x40
 80044f4:	616b      	str	r3, [r5, #20]
 80044f6:	2300      	movs	r3, #0
 80044f8:	9309      	str	r3, [sp, #36]	; 0x24
 80044fa:	2320      	movs	r3, #32
 80044fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004500:	f8cd 800c 	str.w	r8, [sp, #12]
 8004504:	2330      	movs	r3, #48	; 0x30
 8004506:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046ac <_svfiprintf_r+0x1e8>
 800450a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800450e:	f04f 0901 	mov.w	r9, #1
 8004512:	4623      	mov	r3, r4
 8004514:	469a      	mov	sl, r3
 8004516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451a:	b10a      	cbz	r2, 8004520 <_svfiprintf_r+0x5c>
 800451c:	2a25      	cmp	r2, #37	; 0x25
 800451e:	d1f9      	bne.n	8004514 <_svfiprintf_r+0x50>
 8004520:	ebba 0b04 	subs.w	fp, sl, r4
 8004524:	d00b      	beq.n	800453e <_svfiprintf_r+0x7a>
 8004526:	465b      	mov	r3, fp
 8004528:	4622      	mov	r2, r4
 800452a:	4629      	mov	r1, r5
 800452c:	4638      	mov	r0, r7
 800452e:	f7ff ff6f 	bl	8004410 <__ssputs_r>
 8004532:	3001      	adds	r0, #1
 8004534:	f000 80a9 	beq.w	800468a <_svfiprintf_r+0x1c6>
 8004538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800453a:	445a      	add	r2, fp
 800453c:	9209      	str	r2, [sp, #36]	; 0x24
 800453e:	f89a 3000 	ldrb.w	r3, [sl]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a1 	beq.w	800468a <_svfiprintf_r+0x1c6>
 8004548:	2300      	movs	r3, #0
 800454a:	f04f 32ff 	mov.w	r2, #4294967295
 800454e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004552:	f10a 0a01 	add.w	sl, sl, #1
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9307      	str	r3, [sp, #28]
 800455a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800455e:	931a      	str	r3, [sp, #104]	; 0x68
 8004560:	4654      	mov	r4, sl
 8004562:	2205      	movs	r2, #5
 8004564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004568:	4850      	ldr	r0, [pc, #320]	; (80046ac <_svfiprintf_r+0x1e8>)
 800456a:	f7fb fe59 	bl	8000220 <memchr>
 800456e:	9a04      	ldr	r2, [sp, #16]
 8004570:	b9d8      	cbnz	r0, 80045aa <_svfiprintf_r+0xe6>
 8004572:	06d0      	lsls	r0, r2, #27
 8004574:	bf44      	itt	mi
 8004576:	2320      	movmi	r3, #32
 8004578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457c:	0711      	lsls	r1, r2, #28
 800457e:	bf44      	itt	mi
 8004580:	232b      	movmi	r3, #43	; 0x2b
 8004582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004586:	f89a 3000 	ldrb.w	r3, [sl]
 800458a:	2b2a      	cmp	r3, #42	; 0x2a
 800458c:	d015      	beq.n	80045ba <_svfiprintf_r+0xf6>
 800458e:	9a07      	ldr	r2, [sp, #28]
 8004590:	4654      	mov	r4, sl
 8004592:	2000      	movs	r0, #0
 8004594:	f04f 0c0a 	mov.w	ip, #10
 8004598:	4621      	mov	r1, r4
 800459a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800459e:	3b30      	subs	r3, #48	; 0x30
 80045a0:	2b09      	cmp	r3, #9
 80045a2:	d94d      	bls.n	8004640 <_svfiprintf_r+0x17c>
 80045a4:	b1b0      	cbz	r0, 80045d4 <_svfiprintf_r+0x110>
 80045a6:	9207      	str	r2, [sp, #28]
 80045a8:	e014      	b.n	80045d4 <_svfiprintf_r+0x110>
 80045aa:	eba0 0308 	sub.w	r3, r0, r8
 80045ae:	fa09 f303 	lsl.w	r3, r9, r3
 80045b2:	4313      	orrs	r3, r2
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	46a2      	mov	sl, r4
 80045b8:	e7d2      	b.n	8004560 <_svfiprintf_r+0x9c>
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	1d19      	adds	r1, r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	9103      	str	r1, [sp, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bfbb      	ittet	lt
 80045c6:	425b      	neglt	r3, r3
 80045c8:	f042 0202 	orrlt.w	r2, r2, #2
 80045cc:	9307      	strge	r3, [sp, #28]
 80045ce:	9307      	strlt	r3, [sp, #28]
 80045d0:	bfb8      	it	lt
 80045d2:	9204      	strlt	r2, [sp, #16]
 80045d4:	7823      	ldrb	r3, [r4, #0]
 80045d6:	2b2e      	cmp	r3, #46	; 0x2e
 80045d8:	d10c      	bne.n	80045f4 <_svfiprintf_r+0x130>
 80045da:	7863      	ldrb	r3, [r4, #1]
 80045dc:	2b2a      	cmp	r3, #42	; 0x2a
 80045de:	d134      	bne.n	800464a <_svfiprintf_r+0x186>
 80045e0:	9b03      	ldr	r3, [sp, #12]
 80045e2:	1d1a      	adds	r2, r3, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	9203      	str	r2, [sp, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bfb8      	it	lt
 80045ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f0:	3402      	adds	r4, #2
 80045f2:	9305      	str	r3, [sp, #20]
 80045f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80046bc <_svfiprintf_r+0x1f8>
 80045f8:	7821      	ldrb	r1, [r4, #0]
 80045fa:	2203      	movs	r2, #3
 80045fc:	4650      	mov	r0, sl
 80045fe:	f7fb fe0f 	bl	8000220 <memchr>
 8004602:	b138      	cbz	r0, 8004614 <_svfiprintf_r+0x150>
 8004604:	9b04      	ldr	r3, [sp, #16]
 8004606:	eba0 000a 	sub.w	r0, r0, sl
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	4082      	lsls	r2, r0
 800460e:	4313      	orrs	r3, r2
 8004610:	3401      	adds	r4, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004618:	4825      	ldr	r0, [pc, #148]	; (80046b0 <_svfiprintf_r+0x1ec>)
 800461a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800461e:	2206      	movs	r2, #6
 8004620:	f7fb fdfe 	bl	8000220 <memchr>
 8004624:	2800      	cmp	r0, #0
 8004626:	d038      	beq.n	800469a <_svfiprintf_r+0x1d6>
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <_svfiprintf_r+0x1f0>)
 800462a:	bb1b      	cbnz	r3, 8004674 <_svfiprintf_r+0x1b0>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	3307      	adds	r3, #7
 8004630:	f023 0307 	bic.w	r3, r3, #7
 8004634:	3308      	adds	r3, #8
 8004636:	9303      	str	r3, [sp, #12]
 8004638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463a:	4433      	add	r3, r6
 800463c:	9309      	str	r3, [sp, #36]	; 0x24
 800463e:	e768      	b.n	8004512 <_svfiprintf_r+0x4e>
 8004640:	fb0c 3202 	mla	r2, ip, r2, r3
 8004644:	460c      	mov	r4, r1
 8004646:	2001      	movs	r0, #1
 8004648:	e7a6      	b.n	8004598 <_svfiprintf_r+0xd4>
 800464a:	2300      	movs	r3, #0
 800464c:	3401      	adds	r4, #1
 800464e:	9305      	str	r3, [sp, #20]
 8004650:	4619      	mov	r1, r3
 8004652:	f04f 0c0a 	mov.w	ip, #10
 8004656:	4620      	mov	r0, r4
 8004658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465c:	3a30      	subs	r2, #48	; 0x30
 800465e:	2a09      	cmp	r2, #9
 8004660:	d903      	bls.n	800466a <_svfiprintf_r+0x1a6>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0c6      	beq.n	80045f4 <_svfiprintf_r+0x130>
 8004666:	9105      	str	r1, [sp, #20]
 8004668:	e7c4      	b.n	80045f4 <_svfiprintf_r+0x130>
 800466a:	fb0c 2101 	mla	r1, ip, r1, r2
 800466e:	4604      	mov	r4, r0
 8004670:	2301      	movs	r3, #1
 8004672:	e7f0      	b.n	8004656 <_svfiprintf_r+0x192>
 8004674:	ab03      	add	r3, sp, #12
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	462a      	mov	r2, r5
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <_svfiprintf_r+0x1f4>)
 800467c:	a904      	add	r1, sp, #16
 800467e:	4638      	mov	r0, r7
 8004680:	f3af 8000 	nop.w
 8004684:	1c42      	adds	r2, r0, #1
 8004686:	4606      	mov	r6, r0
 8004688:	d1d6      	bne.n	8004638 <_svfiprintf_r+0x174>
 800468a:	89ab      	ldrh	r3, [r5, #12]
 800468c:	065b      	lsls	r3, r3, #25
 800468e:	f53f af2d 	bmi.w	80044ec <_svfiprintf_r+0x28>
 8004692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004694:	b01d      	add	sp, #116	; 0x74
 8004696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469a:	ab03      	add	r3, sp, #12
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	462a      	mov	r2, r5
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <_svfiprintf_r+0x1f4>)
 80046a2:	a904      	add	r1, sp, #16
 80046a4:	4638      	mov	r0, r7
 80046a6:	f000 f879 	bl	800479c <_printf_i>
 80046aa:	e7eb      	b.n	8004684 <_svfiprintf_r+0x1c0>
 80046ac:	0800585c 	.word	0x0800585c
 80046b0:	08005866 	.word	0x08005866
 80046b4:	00000000 	.word	0x00000000
 80046b8:	08004411 	.word	0x08004411
 80046bc:	08005862 	.word	0x08005862

080046c0 <_printf_common>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	4699      	mov	r9, r3
 80046c8:	688a      	ldr	r2, [r1, #8]
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	bfb8      	it	lt
 80046d4:	4613      	movlt	r3, r2
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046dc:	4607      	mov	r7, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	b10a      	cbz	r2, 80046e6 <_printf_common+0x26>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	6833      	ldrmi	r3, [r6, #0]
 80046ee:	3302      	addmi	r3, #2
 80046f0:	6033      	strmi	r3, [r6, #0]
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	f015 0506 	ands.w	r5, r5, #6
 80046f8:	d106      	bne.n	8004708 <_printf_common+0x48>
 80046fa:	f104 0a19 	add.w	sl, r4, #25
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	6832      	ldr	r2, [r6, #0]
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	42ab      	cmp	r3, r5
 8004706:	dc26      	bgt.n	8004756 <_printf_common+0x96>
 8004708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800470c:	1e13      	subs	r3, r2, #0
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	bf18      	it	ne
 8004712:	2301      	movne	r3, #1
 8004714:	0692      	lsls	r2, r2, #26
 8004716:	d42b      	bmi.n	8004770 <_printf_common+0xb0>
 8004718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800471c:	4649      	mov	r1, r9
 800471e:	4638      	mov	r0, r7
 8004720:	47c0      	blx	r8
 8004722:	3001      	adds	r0, #1
 8004724:	d01e      	beq.n	8004764 <_printf_common+0xa4>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	6922      	ldr	r2, [r4, #16]
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf02      	ittt	eq
 8004732:	68e5      	ldreq	r5, [r4, #12]
 8004734:	6833      	ldreq	r3, [r6, #0]
 8004736:	1aed      	subeq	r5, r5, r3
 8004738:	68a3      	ldr	r3, [r4, #8]
 800473a:	bf0c      	ite	eq
 800473c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004740:	2500      	movne	r5, #0
 8004742:	4293      	cmp	r3, r2
 8004744:	bfc4      	itt	gt
 8004746:	1a9b      	subgt	r3, r3, r2
 8004748:	18ed      	addgt	r5, r5, r3
 800474a:	2600      	movs	r6, #0
 800474c:	341a      	adds	r4, #26
 800474e:	42b5      	cmp	r5, r6
 8004750:	d11a      	bne.n	8004788 <_printf_common+0xc8>
 8004752:	2000      	movs	r0, #0
 8004754:	e008      	b.n	8004768 <_printf_common+0xa8>
 8004756:	2301      	movs	r3, #1
 8004758:	4652      	mov	r2, sl
 800475a:	4649      	mov	r1, r9
 800475c:	4638      	mov	r0, r7
 800475e:	47c0      	blx	r8
 8004760:	3001      	adds	r0, #1
 8004762:	d103      	bne.n	800476c <_printf_common+0xac>
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476c:	3501      	adds	r5, #1
 800476e:	e7c6      	b.n	80046fe <_printf_common+0x3e>
 8004770:	18e1      	adds	r1, r4, r3
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	2030      	movs	r0, #48	; 0x30
 8004776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800477a:	4422      	add	r2, r4
 800477c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004784:	3302      	adds	r3, #2
 8004786:	e7c7      	b.n	8004718 <_printf_common+0x58>
 8004788:	2301      	movs	r3, #1
 800478a:	4622      	mov	r2, r4
 800478c:	4649      	mov	r1, r9
 800478e:	4638      	mov	r0, r7
 8004790:	47c0      	blx	r8
 8004792:	3001      	adds	r0, #1
 8004794:	d0e6      	beq.n	8004764 <_printf_common+0xa4>
 8004796:	3601      	adds	r6, #1
 8004798:	e7d9      	b.n	800474e <_printf_common+0x8e>
	...

0800479c <_printf_i>:
 800479c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	7e0f      	ldrb	r7, [r1, #24]
 80047a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047a4:	2f78      	cmp	r7, #120	; 0x78
 80047a6:	4691      	mov	r9, r2
 80047a8:	4680      	mov	r8, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	469a      	mov	sl, r3
 80047ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047b2:	d807      	bhi.n	80047c4 <_printf_i+0x28>
 80047b4:	2f62      	cmp	r7, #98	; 0x62
 80047b6:	d80a      	bhi.n	80047ce <_printf_i+0x32>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	f000 80d4 	beq.w	8004966 <_printf_i+0x1ca>
 80047be:	2f58      	cmp	r7, #88	; 0x58
 80047c0:	f000 80c0 	beq.w	8004944 <_printf_i+0x1a8>
 80047c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047cc:	e03a      	b.n	8004844 <_printf_i+0xa8>
 80047ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047d2:	2b15      	cmp	r3, #21
 80047d4:	d8f6      	bhi.n	80047c4 <_printf_i+0x28>
 80047d6:	a101      	add	r1, pc, #4	; (adr r1, 80047dc <_printf_i+0x40>)
 80047d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047dc:	08004835 	.word	0x08004835
 80047e0:	08004849 	.word	0x08004849
 80047e4:	080047c5 	.word	0x080047c5
 80047e8:	080047c5 	.word	0x080047c5
 80047ec:	080047c5 	.word	0x080047c5
 80047f0:	080047c5 	.word	0x080047c5
 80047f4:	08004849 	.word	0x08004849
 80047f8:	080047c5 	.word	0x080047c5
 80047fc:	080047c5 	.word	0x080047c5
 8004800:	080047c5 	.word	0x080047c5
 8004804:	080047c5 	.word	0x080047c5
 8004808:	0800494d 	.word	0x0800494d
 800480c:	08004875 	.word	0x08004875
 8004810:	08004907 	.word	0x08004907
 8004814:	080047c5 	.word	0x080047c5
 8004818:	080047c5 	.word	0x080047c5
 800481c:	0800496f 	.word	0x0800496f
 8004820:	080047c5 	.word	0x080047c5
 8004824:	08004875 	.word	0x08004875
 8004828:	080047c5 	.word	0x080047c5
 800482c:	080047c5 	.word	0x080047c5
 8004830:	0800490f 	.word	0x0800490f
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	602a      	str	r2, [r5, #0]
 800483c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004844:	2301      	movs	r3, #1
 8004846:	e09f      	b.n	8004988 <_printf_i+0x1ec>
 8004848:	6820      	ldr	r0, [r4, #0]
 800484a:	682b      	ldr	r3, [r5, #0]
 800484c:	0607      	lsls	r7, r0, #24
 800484e:	f103 0104 	add.w	r1, r3, #4
 8004852:	6029      	str	r1, [r5, #0]
 8004854:	d501      	bpl.n	800485a <_printf_i+0xbe>
 8004856:	681e      	ldr	r6, [r3, #0]
 8004858:	e003      	b.n	8004862 <_printf_i+0xc6>
 800485a:	0646      	lsls	r6, r0, #25
 800485c:	d5fb      	bpl.n	8004856 <_printf_i+0xba>
 800485e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004862:	2e00      	cmp	r6, #0
 8004864:	da03      	bge.n	800486e <_printf_i+0xd2>
 8004866:	232d      	movs	r3, #45	; 0x2d
 8004868:	4276      	negs	r6, r6
 800486a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800486e:	485a      	ldr	r0, [pc, #360]	; (80049d8 <_printf_i+0x23c>)
 8004870:	230a      	movs	r3, #10
 8004872:	e012      	b.n	800489a <_printf_i+0xfe>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	6820      	ldr	r0, [r4, #0]
 8004878:	1d19      	adds	r1, r3, #4
 800487a:	6029      	str	r1, [r5, #0]
 800487c:	0605      	lsls	r5, r0, #24
 800487e:	d501      	bpl.n	8004884 <_printf_i+0xe8>
 8004880:	681e      	ldr	r6, [r3, #0]
 8004882:	e002      	b.n	800488a <_printf_i+0xee>
 8004884:	0641      	lsls	r1, r0, #25
 8004886:	d5fb      	bpl.n	8004880 <_printf_i+0xe4>
 8004888:	881e      	ldrh	r6, [r3, #0]
 800488a:	4853      	ldr	r0, [pc, #332]	; (80049d8 <_printf_i+0x23c>)
 800488c:	2f6f      	cmp	r7, #111	; 0x6f
 800488e:	bf0c      	ite	eq
 8004890:	2308      	moveq	r3, #8
 8004892:	230a      	movne	r3, #10
 8004894:	2100      	movs	r1, #0
 8004896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800489a:	6865      	ldr	r5, [r4, #4]
 800489c:	60a5      	str	r5, [r4, #8]
 800489e:	2d00      	cmp	r5, #0
 80048a0:	bfa2      	ittt	ge
 80048a2:	6821      	ldrge	r1, [r4, #0]
 80048a4:	f021 0104 	bicge.w	r1, r1, #4
 80048a8:	6021      	strge	r1, [r4, #0]
 80048aa:	b90e      	cbnz	r6, 80048b0 <_printf_i+0x114>
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	d04b      	beq.n	8004948 <_printf_i+0x1ac>
 80048b0:	4615      	mov	r5, r2
 80048b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048b6:	fb03 6711 	mls	r7, r3, r1, r6
 80048ba:	5dc7      	ldrb	r7, [r0, r7]
 80048bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048c0:	4637      	mov	r7, r6
 80048c2:	42bb      	cmp	r3, r7
 80048c4:	460e      	mov	r6, r1
 80048c6:	d9f4      	bls.n	80048b2 <_printf_i+0x116>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d10b      	bne.n	80048e4 <_printf_i+0x148>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	07de      	lsls	r6, r3, #31
 80048d0:	d508      	bpl.n	80048e4 <_printf_i+0x148>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	6861      	ldr	r1, [r4, #4]
 80048d6:	4299      	cmp	r1, r3
 80048d8:	bfde      	ittt	le
 80048da:	2330      	movle	r3, #48	; 0x30
 80048dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048e4:	1b52      	subs	r2, r2, r5
 80048e6:	6122      	str	r2, [r4, #16]
 80048e8:	f8cd a000 	str.w	sl, [sp]
 80048ec:	464b      	mov	r3, r9
 80048ee:	aa03      	add	r2, sp, #12
 80048f0:	4621      	mov	r1, r4
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fee4 	bl	80046c0 <_printf_common>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d14a      	bne.n	8004992 <_printf_i+0x1f6>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	b004      	add	sp, #16
 8004902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	4833      	ldr	r0, [pc, #204]	; (80049dc <_printf_i+0x240>)
 8004910:	2778      	movs	r7, #120	; 0x78
 8004912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	6829      	ldr	r1, [r5, #0]
 800491a:	061f      	lsls	r7, r3, #24
 800491c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004920:	d402      	bmi.n	8004928 <_printf_i+0x18c>
 8004922:	065f      	lsls	r7, r3, #25
 8004924:	bf48      	it	mi
 8004926:	b2b6      	uxthmi	r6, r6
 8004928:	07df      	lsls	r7, r3, #31
 800492a:	bf48      	it	mi
 800492c:	f043 0320 	orrmi.w	r3, r3, #32
 8004930:	6029      	str	r1, [r5, #0]
 8004932:	bf48      	it	mi
 8004934:	6023      	strmi	r3, [r4, #0]
 8004936:	b91e      	cbnz	r6, 8004940 <_printf_i+0x1a4>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f023 0320 	bic.w	r3, r3, #32
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	2310      	movs	r3, #16
 8004942:	e7a7      	b.n	8004894 <_printf_i+0xf8>
 8004944:	4824      	ldr	r0, [pc, #144]	; (80049d8 <_printf_i+0x23c>)
 8004946:	e7e4      	b.n	8004912 <_printf_i+0x176>
 8004948:	4615      	mov	r5, r2
 800494a:	e7bd      	b.n	80048c8 <_printf_i+0x12c>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	6826      	ldr	r6, [r4, #0]
 8004950:	6961      	ldr	r1, [r4, #20]
 8004952:	1d18      	adds	r0, r3, #4
 8004954:	6028      	str	r0, [r5, #0]
 8004956:	0635      	lsls	r5, r6, #24
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	d501      	bpl.n	8004960 <_printf_i+0x1c4>
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	e002      	b.n	8004966 <_printf_i+0x1ca>
 8004960:	0670      	lsls	r0, r6, #25
 8004962:	d5fb      	bpl.n	800495c <_printf_i+0x1c0>
 8004964:	8019      	strh	r1, [r3, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	4615      	mov	r5, r2
 800496c:	e7bc      	b.n	80048e8 <_printf_i+0x14c>
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	1d1a      	adds	r2, r3, #4
 8004972:	602a      	str	r2, [r5, #0]
 8004974:	681d      	ldr	r5, [r3, #0]
 8004976:	6862      	ldr	r2, [r4, #4]
 8004978:	2100      	movs	r1, #0
 800497a:	4628      	mov	r0, r5
 800497c:	f7fb fc50 	bl	8000220 <memchr>
 8004980:	b108      	cbz	r0, 8004986 <_printf_i+0x1ea>
 8004982:	1b40      	subs	r0, r0, r5
 8004984:	6060      	str	r0, [r4, #4]
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	2300      	movs	r3, #0
 800498c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004990:	e7aa      	b.n	80048e8 <_printf_i+0x14c>
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	462a      	mov	r2, r5
 8004996:	4649      	mov	r1, r9
 8004998:	4640      	mov	r0, r8
 800499a:	47d0      	blx	sl
 800499c:	3001      	adds	r0, #1
 800499e:	d0ad      	beq.n	80048fc <_printf_i+0x160>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	079b      	lsls	r3, r3, #30
 80049a4:	d413      	bmi.n	80049ce <_printf_i+0x232>
 80049a6:	68e0      	ldr	r0, [r4, #12]
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	4298      	cmp	r0, r3
 80049ac:	bfb8      	it	lt
 80049ae:	4618      	movlt	r0, r3
 80049b0:	e7a6      	b.n	8004900 <_printf_i+0x164>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4632      	mov	r2, r6
 80049b6:	4649      	mov	r1, r9
 80049b8:	4640      	mov	r0, r8
 80049ba:	47d0      	blx	sl
 80049bc:	3001      	adds	r0, #1
 80049be:	d09d      	beq.n	80048fc <_printf_i+0x160>
 80049c0:	3501      	adds	r5, #1
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	9903      	ldr	r1, [sp, #12]
 80049c6:	1a5b      	subs	r3, r3, r1
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dcf2      	bgt.n	80049b2 <_printf_i+0x216>
 80049cc:	e7eb      	b.n	80049a6 <_printf_i+0x20a>
 80049ce:	2500      	movs	r5, #0
 80049d0:	f104 0619 	add.w	r6, r4, #25
 80049d4:	e7f5      	b.n	80049c2 <_printf_i+0x226>
 80049d6:	bf00      	nop
 80049d8:	0800586d 	.word	0x0800586d
 80049dc:	0800587e 	.word	0x0800587e

080049e0 <memmove>:
 80049e0:	4288      	cmp	r0, r1
 80049e2:	b510      	push	{r4, lr}
 80049e4:	eb01 0402 	add.w	r4, r1, r2
 80049e8:	d902      	bls.n	80049f0 <memmove+0x10>
 80049ea:	4284      	cmp	r4, r0
 80049ec:	4623      	mov	r3, r4
 80049ee:	d807      	bhi.n	8004a00 <memmove+0x20>
 80049f0:	1e43      	subs	r3, r0, #1
 80049f2:	42a1      	cmp	r1, r4
 80049f4:	d008      	beq.n	8004a08 <memmove+0x28>
 80049f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049fe:	e7f8      	b.n	80049f2 <memmove+0x12>
 8004a00:	4402      	add	r2, r0
 8004a02:	4601      	mov	r1, r0
 8004a04:	428a      	cmp	r2, r1
 8004a06:	d100      	bne.n	8004a0a <memmove+0x2a>
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a12:	e7f7      	b.n	8004a04 <memmove+0x24>

08004a14 <_sbrk_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	; (8004a30 <_sbrk_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fc fd7c 	bl	800151c <_sbrk>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_sbrk_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_sbrk_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	200006b4 	.word	0x200006b4

08004a34 <memcpy>:
 8004a34:	440a      	add	r2, r1
 8004a36:	4291      	cmp	r1, r2
 8004a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a3c:	d100      	bne.n	8004a40 <memcpy+0xc>
 8004a3e:	4770      	bx	lr
 8004a40:	b510      	push	{r4, lr}
 8004a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	d1f9      	bne.n	8004a42 <memcpy+0xe>
 8004a4e:	bd10      	pop	{r4, pc}

08004a50 <_realloc_r>:
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	4680      	mov	r8, r0
 8004a56:	4614      	mov	r4, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	b921      	cbnz	r1, 8004a66 <_realloc_r+0x16>
 8004a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	4611      	mov	r1, r2
 8004a62:	f7ff bc49 	b.w	80042f8 <_malloc_r>
 8004a66:	b92a      	cbnz	r2, 8004a74 <_realloc_r+0x24>
 8004a68:	f7ff fbda 	bl	8004220 <_free_r>
 8004a6c:	4625      	mov	r5, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	f000 f81b 	bl	8004aae <_malloc_usable_size_r>
 8004a78:	4284      	cmp	r4, r0
 8004a7a:	4607      	mov	r7, r0
 8004a7c:	d802      	bhi.n	8004a84 <_realloc_r+0x34>
 8004a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a82:	d812      	bhi.n	8004aaa <_realloc_r+0x5a>
 8004a84:	4621      	mov	r1, r4
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff fc36 	bl	80042f8 <_malloc_r>
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d0ed      	beq.n	8004a6e <_realloc_r+0x1e>
 8004a92:	42bc      	cmp	r4, r7
 8004a94:	4622      	mov	r2, r4
 8004a96:	4631      	mov	r1, r6
 8004a98:	bf28      	it	cs
 8004a9a:	463a      	movcs	r2, r7
 8004a9c:	f7ff ffca 	bl	8004a34 <memcpy>
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f7ff fbbc 	bl	8004220 <_free_r>
 8004aa8:	e7e1      	b.n	8004a6e <_realloc_r+0x1e>
 8004aaa:	4635      	mov	r5, r6
 8004aac:	e7df      	b.n	8004a6e <_realloc_r+0x1e>

08004aae <_malloc_usable_size_r>:
 8004aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab2:	1f18      	subs	r0, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bfbc      	itt	lt
 8004ab8:	580b      	ldrlt	r3, [r1, r0]
 8004aba:	18c0      	addlt	r0, r0, r3
 8004abc:	4770      	bx	lr
	...

08004ac0 <_init>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr

08004acc <_fini>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr
